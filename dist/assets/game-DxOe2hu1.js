class u{constructor(){this.currentScreen="loading",this.previousScreen=null,this.screens=new Map,this.modalStack=[],this.callbacks=new Map,this.setupScreens(),this.setupEventListeners(),this.hideAllScreens()}hideAllScreens(){document.querySelectorAll(".screen").forEach(t=>{t.id!=="loading-screen"&&(t.style.display="none",t.classList.remove("active"),console.log(`[ScreenManager] Hiding screen: ${t.id}`))}),console.log("[ScreenManager] All screens hidden initially")}setupScreens(){const e={loading:{element:"loading-screen",init:()=>this.initLoadingScreen()},"main-menu":{element:"main-menu-screen",init:()=>this.initMainMenuScreen()},game:{element:"game-screen",init:()=>this.initGameScreen()},achievements:{element:"achievement-gallery-screen",init:()=>this.initAchievementScreen()},settings:{element:"settings-screen",init:()=>this.initSettingsScreen()},"save-load":{element:"save-load-screen",init:()=>this.initSaveLoadScreen()},tutorial:{element:"tutorialScreen",init:()=>this.initTutorialScreen()},credits:{element:"creditsScreen",init:()=>this.initCreditsScreen()},"level-select":{element:"levelSelectScreen",init:()=>this.initLevelSelectScreen()},victory:{element:"victoryScreen",init:()=>this.initVictoryScreen()},defeat:{element:"defeatScreen",init:()=>this.initDefeatScreen()},"upgrade-tree":{element:"upgrade-tree-modal",init:()=>this.initUpgradeTreeScreen(),isModal:!0},"boss-warning":{element:"boss-warning-modal",init:()=>this.initBossWarningScreen(),isModal:!0},"pause-menu":{element:"pause-menu-overlay",init:()=>this.initPauseMenuScreen(),isModal:!0}};for(const[t,s]of Object.entries(e)){const a=document.getElementById(s.element);a?this.screens.set(t,{element:a,init:s.init,isModal:s.isModal||!1,initialized:!1}):console.warn(`[ScreenManager] Screen element not found: ${s.element}`)}}setupEventListeners(){this.addClickListener("start-game-btn",()=>this.startNewGame()),this.addClickListener("continue-game-btn",()=>this.continueGame()),this.addClickListener("levelSelectBtn",()=>this.showScreen("level-select")),this.addClickListener("save-load-btn",()=>this.showScreen("save-load")),this.addClickListener("tutorialBtn",()=>this.showScreen("tutorial")),this.addClickListener("achievements-btn",()=>this.showScreen("achievements")),this.addClickListener("settings-btn",()=>this.showScreen("settings")),this.addClickListener("creditsBtn",()=>this.showScreen("credits")),this.addClickListener("main-menu-btn",()=>this.showScreen("main-menu")),this.addClickListener("tutorial-btn",()=>this.showScreen("tutorial")),this.addClickListener("achievements-btn-header",()=>this.showScreen("achievements")),this.addClickListener("settings-btn-header",()=>this.showScreen("settings")),this.addClickListener("credits-btn-header",()=>this.showScreen("credits")),this.addClickListener("back-to-menu-btn",()=>this.showScreen("main-menu")),this.addClickListener("back-from-achievements",()=>this.showScreen("main-menu")),this.addClickListener("back-from-settings",()=>this.showScreen("main-menu")),this.addClickListener("back-from-save-load",()=>this.showScreen("main-menu")),this.addClickListener("backFromTutorialBtn",()=>this.showScreen("main-menu")),this.addClickListener("backFromCreditsBtn",()=>this.showScreen("main-menu")),this.addClickListener("backFromLevelSelectBtn",()=>this.showScreen("main-menu")),this.addClickListener("pause-game-btn",()=>this.pauseGame()),this.addClickListener("resume-game-btn",()=>this.resumeGame()),this.addClickListener("return-to-menu-btn",()=>this.returnToMenu()),this.addClickListener("close-upgrade-tree",()=>this.closeModal("upgrade-tree")),this.addClickListener("close-boss-warning",()=>this.closeModal("boss-warning")),document.addEventListener("click",e=>{e.target.classList.contains("modal-overlay")&&this.closeTopModal()}),document.addEventListener("keydown",e=>{e.key==="Escape"&&this.handleEscapeKey()})}addClickListener(e,t){const s=document.getElementById(e);s?(console.log(`[ScreenManager] Adding click listener for: ${e}`),s.addEventListener("click",a=>{console.log(`[ScreenManager] Button clicked: ${e}`),t(a)})):console.warn(`[ScreenManager] Element not found for click listener: ${e}`)}showScreen(e,t={}){if(console.log(`[ScreenManager] Attempting to show screen: ${e}`),!this.screens.has(e))return console.warn(`[ScreenManager] Unknown screen: ${e}`),!1;const s=this.screens.get(e);if(s.isModal)return this.showModal(e,t);try{this.screens.forEach((n,r)=>{if(!n.isModal&&n.element)try{n.element.style.display="none",n.element.classList.remove("active"),console.log(`[ScreenManager] Hiding screen: ${r}`)}catch(o){console.warn(`[ScreenManager] Error hiding screen ${r}:`,o)}});const a=document.getElementById("loading-screen");if(a&&(a.style.display="none",a.classList.remove("active"),console.log("[ScreenManager] Loading screen hidden")),!s.initialized)try{s.init(),s.initialized=!0}catch(n){console.warn(`[ScreenManager] Error initializing screen ${e}:`,n)}const i="flex";return s.element.style.display=i,s.element.classList.add("active"),console.log(`[ScreenManager] Showing screen: ${e}`),this.manageBodyOverflow(e),this.previousScreen=this.currentScreen,this.currentScreen=e,this.triggerCallback("screenChanged",{from:this.previousScreen,to:e}),!0}catch(a){return console.error(`[ScreenManager] Error showing screen ${e}:`,a),!1}}manageBodyOverflow(e){try{e==="game"?(document.body.style.overflow="hidden",console.log("[ScreenManager] Body overflow set to hidden for game screen")):(document.body.style.overflow="auto",console.log(`[ScreenManager] Body overflow set to auto for screen: ${e}`))}catch(t){console.warn("[ScreenManager] Error managing body overflow:",t),document.body.style.overflow="auto"}}showMainMenuDirect(){console.log("[ScreenManager] Using shared main menu display");const e=Utils.dom.showMainMenuDirect();return e&&(this.currentScreen="main-menu",this.manageBodyOverflow("main-menu")),e}showModal(e,t={}){if(!this.screens.has(e))return console.warn(`[ScreenManager] Unknown modal: ${e}`),!1;const s=this.screens.get(e);return s.isModal?(s.initialized||(s.init(),s.initialized=!0),s.element.style.display=t.display||"flex",s.element.classList.remove("hidden"),s.element.style.zIndex=1e3+this.modalStack.length,this.modalStack.push(e),this.triggerCallback("modalOpened",{modal:e,options:t}),console.log(`[ScreenManager] Opened modal: ${e}`),!0):(console.warn(`[ScreenManager] ${e} is not a modal screen`),!1)}closeModal(e){if(!e)return this.closeTopModal();const t=this.screens.get(e);if(!t||!t.isModal)return console.warn(`[ScreenManager] Invalid modal: ${e}`),!1;t.element.style.display="none",t.element.classList.add("hidden");const s=this.modalStack.indexOf(e);return s>-1&&this.modalStack.splice(s,1),this.modalStack.length===0&&this.manageBodyOverflow(this.currentScreen),this.triggerCallback("modalClosed",{modal:e}),console.log(`[ScreenManager] Closed modal: ${e}`),!0}closeTopModal(){if(this.modalStack.length===0)return!1;const e=this.modalStack[this.modalStack.length-1];return this.closeModal(e)}closeAllModals(){for(;this.modalStack.length>0;)this.closeTopModal()}handleEscapeKey(){this.modalStack.length>0?this.closeTopModal():this.currentScreen==="game"&&this.pauseGame()}initLoadingScreen(){console.log("[ScreenManager] Loading screen initialized")}initMainMenuScreen(){this.updateContinueButton(),console.log("[ScreenManager] Main menu screen initialized")}initGameScreen(){this.setupGameHUD(),console.log("[ScreenManager] Game screen initialized")}initAchievementScreen(){this.loadAchievements(),console.log("[ScreenManager] Achievement screen initialized")}initSettingsScreen(){this.setupSettingsControls(),console.log("[ScreenManager] Settings screen initialized")}initSaveLoadScreen(){this.loadSaveSlotInfo(),console.log("[ScreenManager] Save/Load screen initialized")}initTutorialScreen(){this.currentTutorialStep=1,this.totalTutorialSteps=8,this.tutorialStepsContainer=document.querySelector(".tutorial-steps"),this.tutorialProgress=document.getElementById("tutorialProgress"),this.prevBtn=document.getElementById("prevTutorialBtn"),this.nextBtn=document.getElementById("nextTutorialBtn"),this.generateTutorialSteps(),this.prevBtn&&this.prevBtn.addEventListener("click",()=>this.previousTutorialStep()),this.nextBtn&&this.nextBtn.addEventListener("click",()=>this.nextTutorialStep()),this.updateTutorialDisplay(),console.log("[ScreenManager] Tutorial screen initialized with",this.totalTutorialSteps,"steps")}generateTutorialSteps(){const e=[{title:"🙏 Welcome to the Digital Monastery",content:`
                    <p>Greetings, aspiring cyber-monk! You have entered the sacred digital realm where ancient Buddhist wisdom meets cutting-edge technology. Your mission is to protect the network servers from waves of digital corruption using mindful defense strategies.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Philosophy:</strong> In Dharmapala Shield, we practice compassionate protection - defenses redirect and purify threats rather than destroying them.</p>
                    </div>
                `},{title:"💎 Understanding Resources",content:`
                    <p>As a digital monk, you manage three sacred resources that power your defenses:</p>
                    <div class="tutorial-resources-grid">
                        <div class="resource-item">
                            <span class="resource-icon">💎</span>
                            <div class="resource-name">Dharma</div>
                            <div class="resource-description">Primary currency for placing and upgrading defenses. Earned by purifying digital threats.</div>
                        </div>
                        <div class="resource-item">
                            <span class="resource-icon">📡</span>
                            <div class="resource-name">Bandwidth</div>
                            <div class="resource-description">Required for advanced defenses and special abilities. Manages network capacity.</div>
                        </div>
                        <div class="resource-item">
                            <span class="resource-icon">👤</span>
                            <div class="resource-name">Anonymity</div>
                            <div class="resource-description">Rare resource needed for elite cyber-monk defenses. Protects your network identity.</div>
                        </div>
                    </div>
                    <div class="tutorial-highlight">
                        <p><strong>Tip:</strong> Resources regenerate over time. Balance spending with patience for optimal monastery management.</p>
                    </div>
                `},{title:"🏯 Defense Types - Your Digital Arsenal",content:`
                    <p>Each defense type embodies different aspects of Buddhist wisdom:</p>
                    <div class="defense-grid">
                        <div class="defense-preview">
                            <span class="defense-icon">🏯</span>
                            <div class="defense-name">Firewall</div>
                            <div class="defense-cost">25 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">🏛️</span>
                            <div class="defense-name">Encryption</div>
                            <div class="defense-cost">40 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">🕌</span>
                            <div class="defense-name">Decoy</div>
                            <div class="defense-cost">30 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">🏢</span>
                            <div class="defense-name">Mirror</div>
                            <div class="defense-cost">35 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">👻</span>
                            <div class="defense-name">Anonymity</div>
                            <div class="defense-cost">45 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">⚖️</span>
                            <div class="defense-name">Distributor</div>
                            <div class="defense-cost">50 💎</div>
                        </div>
                    </div>
                    <div class="tutorial-highlight">
                        <p><strong>Strategy:</strong> Combine different defense types for maximum effectiveness. Each serves a unique purpose in your digital defense mandala.</p>
                    </div>
                `},{title:"👾 Digital Threats - Know Your Adversaries",content:`
                    <p>The digital realm faces various forms of corruption, each requiring different approaches:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>Script Kiddies</strong> - Fast, erratic attackers with unpredictable movement patterns</li>
                        <li><strong>Federal Agents</strong> - Heavily armored, persistent, and find alternate routes when blocked</li>
                        <li><strong>Corporate Saboteurs</strong> - Can become invisible and move faster temporarily</li>
                        <li><strong>AI Surveillance</strong> - Marks defenses for increased damage with scanning capabilities</li>
                        <li><strong>Quantum Hackers</strong> - Advanced enemies that can phase through defenses</li>
                        <li><strong>Corrupted Monks</strong> - Heal nearby enemies and spread digital corruption</li>
                    </ul>
                    <div class="tutorial-highlight">
                        <p><strong>Wisdom:</strong> Understanding your opponent is the first step to compassionate resolution. Each enemy type requires different defensive strategies.</p>
                    </div>
                `},{title:"🎮 Controls - Mastering the Interface",content:`
                    <p>Learn the sacred gestures to command your digital monastery:</p>
                    <div class="control-keys">
                        <div class="key-binding">
                            <span class="key">Left Click</span>
                            <span class="key-action">Place defense / Select UI</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">Right Click</span>
                            <span class="key-action">Cancel placement</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">Space</span>
                            <span class="key-action">Pause/Resume game</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">ESC</span>
                            <span class="key-action">Open main menu</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">Mouse Wheel</span>
                            <span class="key-action">Zoom in/out</span>
                        </div>
                    </div>
                    <p><strong>Mobile Controls:</strong> Tap to place, hold for info, pinch to zoom, swipe to pan.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Meditation:</strong> Smooth, deliberate actions lead to better strategic outcomes than frantic clicking.</p>
                    </div>
                `},{title:"⚡ Boss Encounters - Ultimate Challenges",content:`
                    <p>Powerful entities threaten the digital realm with devastating abilities:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>Raid Team</strong> - Multi-phase boss that spawns minions and uses EMP bursts to disable defenses</li>
                        <li><strong>MegaCorp Titan</strong> - Massive entity with shield regeneration and drone swarm deployment</li>
                        <li><strong>Corrupted Monk</strong> - Fallen digital monk with corruption fields and meditation storms</li>
                    </ul>
                    <p>Boss encounters feature multiple phases with increasing difficulty and new abilities as their health decreases.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Warning System:</strong> Bosses telegraph their powerful abilities with visual warnings. Use this time to prepare your defenses!</p>
                    </div>
                `},{title:"🏆 Achievements - Path of Progress",content:`
                    <p>Your journey as a cyber-monk is measured through achievements across five categories:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>First Steps</strong> - Beginning your digital meditation journey</li>
                        <li><strong>Combat Mastery</strong> - Perfecting defensive techniques</li>
                        <li><strong>Strategic Genius</strong> - Advanced tactical achievements</li>
                        <li><strong>Progression</strong> - Advancing through levels and waves</li>
                        <li><strong>Hidden Secrets</strong> - Discovering hidden aspects of the digital realm</li>
                    </ul>
                    <p>Achievements provide long-term goals and unlock special recognition for your accomplishments.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Mindfulness:</strong> Focus on the present moment rather than chasing achievements. They will come naturally through dedicated practice.</p>
                    </div>
                `},{title:"🌟 Begin Your Journey",content:`
                    <p>You are now ready to begin your path as a digital guardian. Remember these core principles:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>Compassionate Protection</strong> - Defend without aggression</li>
                        <li><strong>Mindful Strategy</strong> - Think before you place each defense</li>
                        <li><strong>Resource Wisdom</strong> - Balance spending with patience</li>
                        <li><strong>Adaptive Learning</strong> - Each enemy teaches you something new</li>
                        <li><strong>Present Awareness</strong> - Stay focused on the current wave</li>
                    </ul>
                    <div class="tutorial-highlight">
                        <p><strong>Final Wisdom:</strong> "In the digital realm, as in life, compassionate protection guards against suffering. May your defenses be strong and your meditation deep." 🧘‍♂️✨</p>
                    </div>
                    <p style="text-align: center; margin-top: 30px;">
                        <strong>Click "Start Campaign" from the main menu to begin your first level!</strong>
                    </p>
                `}];this.tutorialStepsContainer&&(this.tutorialStepsContainer.innerHTML="",e.forEach((t,s)=>{const a=document.createElement("div");a.className="tutorial-step",a.setAttribute("data-step",s+1),s===0&&a.classList.add("active"),a.innerHTML=`
                    <div class="step-content">
                        <h3>${t.title}</h3>
                        ${t.content}
                    </div>
                `,this.tutorialStepsContainer.appendChild(a)}))}nextTutorialStep(){this.currentTutorialStep<this.totalTutorialSteps&&(this.currentTutorialStep++,this.updateTutorialDisplay())}previousTutorialStep(){this.currentTutorialStep>1&&(this.currentTutorialStep--,this.updateTutorialDisplay())}updateTutorialDisplay(){this.tutorialProgress&&(this.tutorialProgress.textContent=`${this.currentTutorialStep} / ${this.totalTutorialSteps}`),this.prevBtn&&(this.prevBtn.disabled=this.currentTutorialStep===1),this.nextBtn&&(this.nextBtn.disabled=this.currentTutorialStep===this.totalTutorialSteps),document.querySelectorAll(".tutorial-step").forEach((t,s)=>{s+1===this.currentTutorialStep?t.classList.add("active"):t.classList.remove("active")}),console.log(`[ScreenManager] Tutorial step ${this.currentTutorialStep} displayed`)}initCreditsScreen(){console.log("[ScreenManager] Credits screen initialized")}initLevelSelectScreen(){this.loadLevelInfo(),console.log("[ScreenManager] Level select screen initialized")}initVictoryScreen(){console.log("[ScreenManager] Victory screen initialized")}initDefeatScreen(){console.log("[ScreenManager] Defeat screen initialized")}initUpgradeTreeScreen(){console.log("[ScreenManager] Upgrade tree modal initialized")}initBossWarningScreen(){console.log("[ScreenManager] Boss warning modal initialized")}initPauseMenuScreen(){console.log("[ScreenManager] Pause menu modal initialized")}startNewGame(){console.log("[ScreenManager] startNewGame() called"),this.triggerCallback("startNewGame"),this.showScreen("game"),console.log("[ScreenManager] Starting new game, switching to game screen")}continueGame(){this.triggerCallback("continueGame"),this.showScreen("game"),console.log("[ScreenManager] Continuing game, switching to game screen")}pauseGame(){this.triggerCallback("pauseGame"),this.showModal("pause-menu")}resumeGame(){this.triggerCallback("resumeGame"),this.closeModal("pause-menu")}returnToMenu(){this.triggerCallback("returnToMenu"),this.closeAllModals(),this.showScreen("main-menu")}updateContinueButton(){const e=document.getElementById("continue-game-btn");if(e&&window.saveSystem){const t=window.saveSystem.getMostRecentSave()!==null;e.disabled=!t,e.style.opacity=t?"1":"0.5"}}setupGameHUD(){["dharma-display","bandwidth-display","anonymity-display","wave-display","level-display"].forEach(t=>{document.getElementById(t)||console.warn(`[ScreenManager] HUD element not found: ${t}`)})}loadAchievements(){var t;const e=(t=window.gameSystemManager)==null?void 0:t.getAchievementManager();e&&this.triggerCallback("loadAchievements",{achievementManager:e})}setupSettingsControls(){this.setupVolumeControls(),this.setupGameplaySettings()}setupVolumeControls(){[{id:"master-volume",callback:"setMasterVolume"},{id:"music-volume",callback:"setMusicVolume"},{id:"sfx-volume",callback:"setSfxVolume"}].forEach(t=>{const s=document.getElementById(t.id);s&&s.addEventListener("input",a=>{const i=parseFloat(a.target.value);this.triggerCallback(t.callback,{value:i})})})}setupGameplaySettings(){[{id:"screen-flash-toggle",callback:"setScreenFlash"},{id:"reduce-motion-toggle",callback:"setReduceMotion"}].forEach(t=>{const s=document.getElementById(t.id);s&&s.addEventListener("change",a=>{this.triggerCallback(t.callback,{value:a.target.checked})})})}loadSaveSlotInfo(){if(window.saveSystem){const e=window.saveSystem.getAllSaveInfo();this.triggerCallback("loadSaveSlots",{saveInfo:e})}}loadLevelInfo(){this.triggerCallback("loadLevelInfo")}on(e,t){this.callbacks.has(e)||this.callbacks.set(e,[]),this.callbacks.get(e).push(t)}off(e,t){if(this.callbacks.has(e)){const s=this.callbacks.get(e),a=s.indexOf(t);a>-1&&s.splice(a,1)}}triggerCallback(e,t={}){if(this.callbacks.has(e)){const s=this.callbacks.get(e);for(const a of s)try{a(t)}catch(i){console.error(`[ScreenManager] Error in callback for ${e}:`,i)}}}getCurrentScreen(){return this.currentScreen}getPreviousScreen(){return this.previousScreen}isModalOpen(e=null){return e?this.modalStack.includes(e):this.modalStack.length>0}getOpenModals(){return[...this.modalStack]}updateResourceDisplay(e){const t={dharma:"dharma-display",bandwidth:"bandwidth-display",anonymity:"anonymity-display"};for(const[s,a]of Object.entries(t)){const i=document.getElementById(a);i&&e[s]!==void 0&&(i.textContent=Utils.game.formatNumber(e[s]))}}updateWaveDisplay(e,t){const s=document.getElementById("wave-display");s&&(s.textContent=`Wave ${e}/${t}`)}updateLevelDisplay(e){const t=document.getElementById("level-display");t&&(t.textContent=`Level ${e}`)}showBossWarning(e){const t=this.screens.get("boss-warning");if(t){const s=t.element.querySelector(".boss-title"),a=t.element.querySelector(".boss-description");s&&(s.textContent=e.name||"Boss Approaching"),a&&(a.textContent=e.description||"Prepare for battle!"),this.showModal("boss-warning"),setTimeout(()=>{this.closeModal("boss-warning")},3e3)}}destroy(){this.callbacks.clear(),this.modalStack.length=0,this.screens.clear()}}class c{constructor(e){this.canvas=e,this.ctx=e.getContext("2d"),this.systemManager=null,this.screenManager=null,this.defenseManager=null,this.uiManager=null,this.gameState={running:!1,paused:!1,gameSpeed:1,level:1,wave:1,lives:10,score:0},this.resources={dharma:100,bandwidth:50,anonymity:75},this.enemies=[],this.projectiles=[],this.effects=[],this.lastUpdate=0,this.deltaTime=0,this.canvasResizeEnabled=!1,this.resizeRetryCount=0,this.eventHandlers=new Map,this.performanceConfig={targetFPS:60,maxFPS:120,minFPS:30,frameTimeTarget:1e3/60,adaptiveFrameRate:!0,performanceMode:"auto"},this.frameStats={lastFrameTime:0,frameCount:0,fpsHistory:[],averageFPS:60,frameTimeAccumulator:0,lastFPSUpdate:0},this.performanceThresholds={lowFPS:45,criticalFPS:30,highFPS:55},this.debugConfig={enabled:!1,logLevel:"warn",renderLogging:!1,performanceLogging:!1,maxLogFrequency:5e3,logHistory:new Map},this.backgroundCache={canvas:null,ctx:null,cached:!1,needsUpdate:!1,lastCanvasSize:{width:0,height:0}},this.initializeDebugMode(),this.initializeBackgroundCache(),this.setupEventListeners()}initializeDebugMode(){const t=new URLSearchParams(window.location.search).get("debug");(t==="true"||t==="1")&&(this.debugConfig.enabled=!0,this.debugConfig.logLevel="debug",this.debugConfig.renderLogging=!0,this.debugConfig.performanceLogging=!0),window.location.hostname!=="localhost"&&!window.location.hostname.includes("127.0.0.1")&&(this.debugConfig.enabled=!1,this.debugConfig.renderLogging=!1,this.debugConfig.performanceLogging=!1)}logDebug(e,t=null,s="general"){if(!this.debugConfig.enabled)return;const a=Date.now(),i=this.debugConfig.logHistory.get(s)||0;if(s==="performance"&&a-i<this.debugConfig.maxLogFrequency)return;this.debugConfig.logHistory.set(s,a);const n={debug:0,info:1,warn:2,error:3},r=n[this.debugConfig.logLevel]||1;if((n[s]||0)>=r){const l=`[Game:${s.toUpperCase()}]`;t?console.log(l,e,t):console.log(l,e)}}initializeBackgroundCache(){this.backgroundCache.canvas=document.createElement("canvas"),this.backgroundCache.ctx=this.backgroundCache.canvas.getContext("2d"),this.backgroundCache.cached=!1,this.backgroundCache.needsUpdate=!0}updateBackgroundCache(){if(!this.backgroundCache.needsUpdate)return;const e=this.backgroundCache.canvas,t=this.backgroundCache.ctx;(e.width!==this.canvas.width||e.height!==this.canvas.height)&&(e.width=this.canvas.width,e.height=this.canvas.height,this.backgroundCache.lastCanvasSize={width:this.canvas.width,height:this.canvas.height}),t.clearRect(0,0,e.width,e.height),this.renderBackgroundToCache(t),this.backgroundCache.cached=!0,this.backgroundCache.needsUpdate=!1,this.logDebug("Background cache updated",{width:e.width,height:e.height},"performance")}renderBackgroundToCache(e){const t=e.createLinearGradient(0,0,0,this.canvas.height);t.addColorStop(0,"#0f1419"),t.addColorStop(.3,"#1a1a2e"),t.addColorStop(.7,"#16213e"),t.addColorStop(1,"#0e1b2e"),e.fillStyle=t,e.fillRect(0,0,this.canvas.width,this.canvas.height),e.globalAlpha=.1,e.fillStyle="#ffffff";const s=2,a=30;for(let i=0;i<this.canvas.width;i+=a)for(let n=0;n<this.canvas.height;n+=a)e.beginPath(),e.arc(i,n,s,0,Math.PI*2),e.fill();e.globalAlpha=1}invalidateBackgroundCache(){this.backgroundCache.needsUpdate=!0,this.backgroundCache.cached=!1}async initialize(){console.log("[Game] Initializing game systems...");try{this.systemManager=new GameSystemManager;const e=await this.systemManager.initialize();if(!e.success)throw new Error(`System initialization failed: ${e.error}`);return this.screenManager||(this.screenManager=new u),this.defenseManager=new DefenseManager,this.uiManager=window.uiManager||new UIManager,this.setupInput(),this.setupManagerCallbacks(),this.setupGameSystems(),console.log("[Game] Game initialization complete"),!0}catch(e){return console.error("[Game] Initialization failed:",e),this.handleInitializationError(e),!1}}setupInput(){window.inputManager&&(window.inputManager.setCanvas(this.canvas),window.inputManager.setCamera(window.camera),window.inputManager.addEventListener("mousedown",e=>{this.handleMouseDown(e)}),window.inputManager.addEventListener("mousemove",e=>{this.handleMouseMove(e)}))}setupManagerCallbacks(){console.log("[Game] Setting up screen manager callbacks"),this.screenManager.on("startNewGame",()=>{console.log("[Game] startNewGame callback triggered"),this.startNewGame()}),this.screenManager.on("continueGame",()=>{console.log("[Game] continueGame callback triggered"),this.continueGame()}),this.screenManager.on("pauseGame",()=>this.pauseGame()),this.screenManager.on("resumeGame",()=>this.resumeGame()),this.screenManager.on("returnToMenu",()=>this.returnToMenu()),this.defenseManager.on("checkResources",t=>this.checkResources(t.cost)),this.defenseManager.on("deductResources",t=>this.deductResources(t.cost)),this.defenseManager.on("refundResources",t=>this.refundResources(t.refund)),this.defenseManager.on("defensePlace",t=>this.onDefensePlace(t)),this.defenseManager.on("defenseFireProjectile",t=>this.onDefenseFireProjectile(t));const e=this.systemManager.getLevelManager();e&&e.setCallbacks({onWaveStart:t=>this.onWaveStart(t),onWaveComplete:t=>this.onWaveComplete(t),onLevelComplete:t=>this.onLevelComplete(t),onEnemySpawn:t=>this.onEnemySpawn(t),onEnemyKilled:t=>this.onEnemyKilled(t),onEnemySpawnRequest:(t,s,a)=>this.spawnEnemy(t,s,a)})}setupGameSystems(){this.canvas.width=800,this.canvas.height=600,this.initializeSpriteSystem(),window.camera&&(window.camera.setCanvas(this.canvas),window.camera.setBounds(0,0,800,600),console.log("[Game] Camera bounds set to fallback: 800x600"));const e=this.systemManager.getLevelManager();e&&e.initializeLevel(this.gameState.level),this.updateUI()}initializeSpriteSystem(){if(!window.spriteManager){console.warn("[Game] SpriteManager not available");return}console.log("[Game] Initializing sprite system..."),window.spriteManager.loadGameSprites().then(()=>{console.log("[Game] Game sprites loaded (some may be fallbacks)")}).catch(t=>{console.warn("[Game] Error loading game sprites, using all fallbacks:",t)}),["enemy_scriptKiddie","enemy_federalAgent","enemy_corporateSaboteur","enemy_aiSurveillance","enemy_quantumHacker","enemy_corruptedMonk","defense_firewall_level1","defense_encryption_level1","defense_decoy_level1","defense_quantum_level1","defense_dharma_level1","defense_cybermonk_level1","boss_raidTeam_phase1","boss_megaCorp_phase1","boss_corruptedMonk_phase1"].forEach(t=>{window.spriteManager.hasSprite(t)||window.spriteManager.createFallbackSprite(t)}),console.log("[Game] Sprite system initialized with enhanced graphics")}resizeCanvas(){if(!this.canvasResizeEnabled){console.log("[Game] Canvas resize disabled, skipping");return}const e=document.getElementById("game-screen");if(!e||!e.classList.contains("active")){console.log("[Game] Game screen not active, skipping canvas resize");return}const t=this.canvas.parentElement;if(t){const s=t.getBoundingClientRect();if(s.width===0||s.height===0){console.log("[Game] Container has no size yet, using fallback dimensions"),this.canvas.width=800,this.canvas.height=600,this.canvas.style.width="100%",this.canvas.style.height="100%";return}this.canvas.style.width=s.width+"px",this.canvas.style.height=s.height+"px",this.canvas.width=s.width,this.canvas.height=s.height,console.log(`[Game] Canvas resized to ${this.canvas.width}x${this.canvas.height} (${s.width}x${s.height} CSS)`)}else this.canvas.width=800,this.canvas.height=600,this.canvas.style.width="100%",this.canvas.style.height="100%",console.log("[Game] Using fallback canvas dimensions: 800x600")}setupEventListeners(){document.addEventListener("gameSpeedChange",e=>{this.gameState.gameSpeed=e.detail.speed}),document.addEventListener("togglePause",()=>{this.togglePause()}),document.addEventListener("startNextWave",()=>{this.startNextWave()}),document.addEventListener("selectDefenseType",e=>{this.defenseManager.selectDefenseType(e.detail.type)})}startNewGame(){console.log("[Game] Starting new game..."),this.gameState={running:!0,paused:!1,gameSpeed:1,level:1,wave:1,lives:10,score:0},this.resources={dharma:100,bandwidth:50,anonymity:75},this.enemies.length=0,this.projectiles.length=0,this.effects.length=0,this.defenseManager.clear(),window.particleSystem&&window.particleSystem.clear(),window.projectilePool&&window.projectilePool.clear();const e=this.systemManager.getLevelManager();e&&e.initializeLevel(this.gameState.level),this.canvasResizeEnabled=!0,this.resizeRetryCount=0,setTimeout(()=>{this.resizeCanvas(),window.camera&&(window.camera.setBounds(0,0,this.canvas.width,this.canvas.height),console.log(`[Game] Camera bounds updated to: ${this.canvas.width}x${this.canvas.height}`))},100),this.updateUI(),this.startGameLoop()}continueGame(){console.log("[Game] Continuing game...");const e=this.systemManager.getSaveSystem();if(e){const t=e.quickLoad();if(t)this.loadGameState(t);else{console.warn("[Game] No save data found, starting new game"),this.startNewGame();return}}this.gameState.running=!0,this.gameState.paused=!1,this.canvasResizeEnabled=!0,this.resizeRetryCount=0,setTimeout(()=>{this.resizeCanvas(),window.camera&&(window.camera.setBounds(0,0,this.canvas.width,this.canvas.height),console.log(`[Game] Camera bounds updated to: ${this.canvas.width}x${this.canvas.height}`))},100),this.startGameLoop()}pauseGame(){this.gameState.paused=!0,console.log("[Game] Game paused")}resumeGame(){this.gameState.paused=!1,this.lastUpdate=Utils.performance.now(),console.log("[Game] Game resumed")}togglePause(){this.gameState.paused?this.resumeGame():this.pauseGame()}returnToMenu(){this.gameState.running=!1,this.canvasResizeEnabled=!1,console.log("[Game] Returned to menu")}startGameLoop(){this.frameStats.lastFrameTime=Utils.performance.now(),this.frameStats.lastFPSUpdate=this.frameStats.lastFrameTime,this.gameLoop()}gameLoop(e=Utils.performance.now()){if(!this.gameState.running)return;const t=e-this.frameStats.lastFrameTime;if(t<this.performanceConfig.frameTimeTarget){requestAnimationFrame(a=>this.gameLoop(a));return}this.updateFrameStats(e,t),this.adaptPerformanceSettings();const s=Math.min(t*this.gameState.gameSpeed,33.33);this.gameState.paused||this.update(s),this.shouldRender()&&this.render(),this.frameStats.lastFrameTime=e,requestAnimationFrame(a=>this.gameLoop(a))}updateFrameStats(e,t){if(this.frameStats.frameCount++,this.frameStats.frameTimeAccumulator+=t,e-this.frameStats.lastFPSUpdate>=1e3){const s=this.frameStats.frameCount;this.frameStats.fpsHistory.push(s),this.frameStats.fpsHistory.length>10&&this.frameStats.fpsHistory.shift(),this.frameStats.averageFPS=this.frameStats.fpsHistory.reduce((a,i)=>a+i,0)/this.frameStats.fpsHistory.length,this.frameStats.frameCount=0,this.frameStats.frameTimeAccumulator=0,this.frameStats.lastFPSUpdate=e}}adaptPerformanceSettings(){if(!this.performanceConfig.adaptiveFrameRate)return;const e=this.frameStats.averageFPS;e<this.performanceThresholds.criticalFPS?this.setPerformanceMode("performance"):e<this.performanceThresholds.lowFPS?this.setPerformanceMode("balanced"):e>this.performanceThresholds.highFPS&&this.setPerformanceMode("quality")}setPerformanceMode(e){switch(e){case"performance":this.performanceConfig.targetFPS=30,this.performanceConfig.frameTimeTarget=1e3/30,window.particleSystem&&window.particleSystem.setMaxParticles(200);break;case"balanced":this.performanceConfig.targetFPS=45,this.performanceConfig.frameTimeTarget=1e3/45,window.particleSystem&&window.particleSystem.setMaxParticles(350);break;case"quality":this.performanceConfig.targetFPS=60,this.performanceConfig.frameTimeTarget=1e3/60,window.particleSystem&&window.particleSystem.setMaxParticles(500);break}this.performanceConfig.performanceMode=e,this.logDebug(`Performance mode set to: ${e} (Target FPS: ${this.performanceConfig.targetFPS})`,null,"performance")}shouldRender(){return this.performanceConfig.performanceMode==="performance"?this.frameStats.frameCount%2===0:!0}getPerformanceStats(){return{currentFPS:this.frameStats.averageFPS,targetFPS:this.performanceConfig.targetFPS,performanceMode:this.performanceConfig.performanceMode,frameTimeAverage:this.frameStats.frameTimeAccumulator/Math.max(1,this.frameStats.frameCount),fpsHistory:[...this.frameStats.fpsHistory]}}update(e){window.inputManager&&(window.inputManager.processEvents(),window.inputManager.update()),window.camera&&window.camera.update(e),this.updateEnemies(e),this.defenseManager.update(e,this.enemies),this.updateProjectiles(e),window.particleSystem&&window.particleSystem.update(e);const t=this.systemManager.getLevelManager();if(t)try{t.update(e)}catch(s){console.error("[Game] Error updating LevelManager:",s)}this.checkGameOver(),this.updateUI()}updateEnemies(e){for(let t=this.enemies.length-1;t>=0;t--){const s=this.enemies[t];s.update&&s.update(e),s.isAlive||(this.onEnemyDestroyed(s),this.enemies.splice(t,1)),s.reachedEnd&&(this.onEnemyEscaped(s),this.enemies.splice(t,1))}}updateProjectiles(e){window.projectilePool&&window.projectilePool.updateAll(e)}render(){this.ctx.save(),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.logDebug("Render frame",{canvasSize:{width:this.canvas.width,height:this.canvas.height},enemies:this.enemies.length,gameRunning:this.gameState.running,paused:this.gameState.paused},"performance");let e=null;window.camera&&(e=window.camera.applyTransform(this.ctx)),this.renderBackground(),this.renderPath(),this.renderEnemies(),this.defenseManager.render(this.ctx),this.renderProjectiles(),this.renderParticles(),e&&e(),this.renderUI(),this.ctx.restore()}renderBackground(){(this.backgroundCache.lastCanvasSize.width!==this.canvas.width||this.backgroundCache.lastCanvasSize.height!==this.canvas.height)&&this.invalidateBackgroundCache(),this.updateBackgroundCache(),this.backgroundCache.cached?this.ctx.drawImage(this.backgroundCache.canvas,0,0):this.renderBackgroundToCache(this.ctx),this.logDebug("Background rendered",{cached:this.backgroundCache.cached,canvasSize:{width:this.canvas.width,height:this.canvas.height}},"performance")}renderPath(){const e=this.systemManager.getLevelManager();if(!e){this.logDebug("No level manager available for path rendering",null,"warn");return}const t=e.getCurrentPath();if(!t||t.length<2){this.logDebug("Invalid path for rendering",{pathLength:t==null?void 0:t.length},"warn");return}this.logDebug("Path rendered",{pathLength:t.length,firstPoint:t[0],lastPoint:t[t.length-1]},"performance"),this.ctx.save(),this.ctx.globalAlpha=.3,this.ctx.strokeStyle="#00d4ff",this.ctx.lineWidth=20,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.shadowBlur=15,this.ctx.shadowColor="#00d4ff",this.ctx.beginPath(),this.ctx.moveTo(t[0].x,t[0].y);for(let s=1;s<t.length;s++)this.ctx.lineTo(t[s].x,t[s].y);this.ctx.stroke(),this.ctx.globalAlpha=.8,this.ctx.strokeStyle="#0088cc",this.ctx.lineWidth=14,this.ctx.shadowBlur=8,this.ctx.shadowColor="#0088cc",this.ctx.beginPath(),this.ctx.moveTo(t[0].x,t[0].y);for(let s=1;s<t.length;s++)this.ctx.lineTo(t[s].x,t[s].y);this.ctx.stroke(),this.ctx.globalAlpha=1,this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=4,this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.moveTo(t[0].x,t[0].y);for(let s=1;s<t.length;s++)this.ctx.lineTo(t[s].x,t[s].y);if(this.ctx.stroke(),this.performanceConfig.performanceMode!=="performance"){this.ctx.globalAlpha=.9;const s=Date.now()*.003;for(let a=0;a<t.length-1;a++){const i=a/(t.length-1),n=(s+i*2)%1,r=t[a].x,o=t[a].y,l=t[a+1].x,h=t[a+1].y,g=r+(l-r)*n,m=o+(h-o)*n;this.ctx.fillStyle="#ffd60a",this.ctx.shadowBlur=5,this.ctx.shadowColor="#ffd60a",this.ctx.beginPath(),this.ctx.arc(g,m,3,0,Math.PI*2),this.ctx.fill()}}this.ctx.shadowBlur=10,this.ctx.fillStyle="#00ff88",this.ctx.shadowColor="#00ff88",this.ctx.beginPath(),this.ctx.arc(t[0].x,t[0].y,12,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=.6,this.ctx.fillStyle="#ffffff",this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.arc(t[0].x,t[0].y,6,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=1,this.ctx.fillStyle="#ff4444",this.ctx.shadowBlur=10,this.ctx.shadowColor="#ff4444",this.ctx.beginPath(),this.ctx.arc(t[t.length-1].x,t[t.length-1].y,12,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=.6,this.ctx.fillStyle="#ffffff",this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.arc(t[t.length-1].x,t[t.length-1].y,6,0,Math.PI*2),this.ctx.fill(),this.ctx.restore()}renderEnemies(){this.logDebug("Enemies rendered",{count:this.enemies.length},"performance");for(let e=0;e<this.enemies.length;e++){const t=this.enemies[e];t&&t.render?t.render(this.ctx):this.logDebug(`Enemy ${e} is invalid or missing render method`,{enemy:t},"warn")}}renderProjectiles(){window.projectilePool&&window.projectilePool.renderAll(this.ctx)}renderParticles(){window.particleSystem&&window.particleSystem.render(this.ctx)}renderUI(){}handleMouseDown(e){if(this.defenseManager.placementMode)this.defenseManager.placeDefense(e.worldX,e.worldY)||window.audioManager&&window.audioManager.playSound("ui_error");else{const t=this.findDefenseAt(e.worldX,e.worldY);t?this.defenseManager.selectDefense(t):this.defenseManager.deselectDefense()}}handleMouseMove(e){}findDefenseAt(e,t){for(const s of this.defenseManager.defenses)if(Utils.math.distance(e,t,s.x,s.y)<=s.size)return s;return null}startNextWave(){const e=this.systemManager.getLevelManager();e&&e.canStartNextWave()&&e.startWave()}checkGameOver(){this.gameState.lives<=0&&this.gameOver(!1)}gameOver(e){this.gameState.running=!1,console.log(`[Game] Game Over - ${e?"Victory":"Defeat"}`);const t=new CustomEvent("gameOver",{detail:{victory:e,score:this.gameState.score}});document.dispatchEvent(t),this.trackGameOverAchievements(e)}checkResources(e){return this.resources.dharma>=e.dharma&&this.resources.bandwidth>=e.bandwidth&&this.resources.anonymity>=e.anonymity}deductResources(e){return this.checkResources(e)?(this.resources.dharma-=e.dharma,this.resources.bandwidth-=e.bandwidth,this.resources.anonymity-=e.anonymity,this.updateUI(),!0):!1}refundResources(e){this.resources.dharma+=e.dharma||0,this.resources.bandwidth+=e.bandwidth||0,this.resources.anonymity+=e.anonymity||0,this.updateUI()}addResources(e){this.resources.dharma+=e.dharma||0,this.resources.bandwidth+=e.bandwidth||0,this.resources.anonymity+=e.anonymity||0,this.updateUI()}onWaveStart(e){console.log(`[Game] Wave ${e.wave} started`),this.gameState.wave=e.wave,this.updateUI(),e.waveData&&e.waveData.enemies&&console.log(`[Game] Starting enemy spawning for wave ${e.wave}`),window.audioManager&&window.audioManager.playSound("wave_start")}onWaveComplete(e){console.log(`[Game] Wave ${e.wave} completed`);const t=this.calculateWaveReward(e);this.addResources(t),this.uiManager.showNotification(`Wave ${e.wave} Complete! +${t.dharma} Dharma`,"success"),window.audioManager&&window.audioManager.playSound("wave_complete")}onLevelComplete(e){console.log(`[Game] Level ${e.level} completed`),this.gameState.level=e.level+1;const t=this.calculateLevelReward(e);this.addResources(t),this.uiManager.showNotification(`Level ${e.level} Complete!`,"success",5e3),window.audioManager&&window.audioManager.playSound("level_complete")}spawnEnemy(e,t,s){try{if(typeof Enemy>"u")return console.error("[Game] Enemy class not available for spawning"),!1;if(!e||!t||!s)return console.error("[Game] Invalid spawn parameters:",{enemyData:e,spawnPoint:t,path:s}),!1;const a=new Enemy(e.type,t.x,t.y);a.setPath&&typeof a.setPath=="function"&&a.setPath(s),e.health!==void 0&&(a.health=e.health,a.maxHealth=e.health),e.speed!==void 0&&(a.speed=e.speed,a.baseSpeed=e.speed),e.reward!==void 0&&(a.reward=e.reward),this.enemies.push(a),console.log(`[Game] Spawned ${e.type} enemy at ${t.x}, ${t.y}`),console.log("[Game] Enemy details:",{type:a.type,x:a.x,y:a.y,size:a.size,color:a.color,hasRenderMethod:typeof a.render=="function",isAlive:a.isAlive}),console.log("[Game] Total enemies now:",this.enemies.length);const i=this.systemManager.getLevelManager();return i&&typeof i.onEnemySpawned=="function"&&i.onEnemySpawned(),!0}catch(a){return console.error("[Game] Error spawning enemy:",a),!1}}handleCanvasResize(e){try{console.log("[Game] Handling canvas resize:",e),window.camera&&(window.camera.setBounds(0,0,e.width,e.height),console.log(`[Game] Updated camera bounds to: ${e.width}x${e.height}`)),this.uiManager&&typeof this.uiManager.handleCanvasResize=="function"&&this.uiManager.handleCanvasResize(e),this.defenseManager&&typeof this.defenseManager.handleCanvasResize=="function"&&this.defenseManager.handleCanvasResize(e);const t=this.systemManager.getLevelManager();t&&typeof t.handleCanvasResize=="function"&&t.handleCanvasResize(e),console.log("[Game] Canvas resize handling complete")}catch(t){console.error("[Game] Error handling canvas resize:",t)}}onEnemySpawn(e){this.enemies.push(e);const t=this.systemManager.getLevelManager();t&&t.onEnemySpawned()}onEnemyKilled(e){const t=this.calculateKillReward(e.enemy);this.addResources(t),this.gameState.score+=t.dharma*10,window.particleSystem&&window.particleSystem.emit("death",e.enemy.x,e.enemy.y);const s=this.systemManager.getLevelManager();s&&s.onEnemyKilled(),this.trackKillAchievements(e.enemy)}onEnemyDestroyed(e){this.onEnemyKilled({enemy:e})}onEnemyEscaped(e){this.gameState.lives--,this.gameState.lives>0&&(this.uiManager.showNotification("Enemy escaped! Life lost.","warning"),this.uiManager.flashScreen("#ff0000",300));const t=this.systemManager.getLevelManager();t&&t.onEnemyEscaped(),window.audioManager&&window.audioManager.playSound("life_lost")}onDefensePlace(e){console.log(`[Game] Placed ${e.defense.type} defense`),window.audioManager&&window.audioManager.playSound("defense_place"),window.particleSystem&&window.particleSystem.emit("upgrade",e.defense.x,e.defense.y)}onDefenseFireProjectile(e){window.audioManager&&window.audioManager.playSound("defense_fire")}calculateKillReward(e){const t=e.reward||10;return{dharma:t,bandwidth:Math.floor(t*.1),anonymity:Math.floor(t*.05)}}calculateWaveReward(e){const t=50+e.wave*10;return{dharma:t,bandwidth:Math.floor(t*.2),anonymity:Math.floor(t*.1)}}calculateLevelReward(e){const t=200+e.level*50;return{dharma:t,bandwidth:Math.floor(t*.3),anonymity:Math.floor(t*.2)}}trackKillAchievements(e){const t=this.systemManager.getAchievementManager();t&&t.trackEvent("enemy_killed",{type:e.type})}trackGameOverAchievements(e){const t=this.systemManager.getAchievementManager();t&&t.trackEvent("game_over",{victory:e,score:this.gameState.score,level:this.gameState.level})}updateUI(){this.uiManager.updateResources(this.resources),this.uiManager.updateGameState(this.gameState);const e=this.systemManager.getLevelManager();if(e){const t=e.canStartNextWave(),s=e.getNextWavePreview();if(this.uiManager.updateWaveButton(t,s),e.isWaveInProgress()){const a=e.getWaveProgress();this.uiManager.updateWaveProgress(a*100,100)}}}loadGameState(e){var t;this.gameState.level=e.level||1,this.gameState.wave=e.wave||1,this.gameState.score=((t=e.statistics)==null?void 0:t.totalScore)||0,this.gameState.lives=10,this.resources=e.resources||this.resources}saveGame(){const e=this.systemManager.getSaveSystem();if(e){const t={level:this.gameState.level,wave:this.gameState.wave,resources:this.resources,statistics:{totalScore:this.gameState.score,totalPlayTime:Date.now()}};return e.quickSave(t)}return!1}handleInitializationError(e){console.error("[Game] Critical initialization error:",e);const t=document.createElement("div");t.innerHTML=`
            <div class="error-screen">
                <h2>Game Initialization Failed</h2>
                <p>Error: ${e.message}</p>
                <button onclick="location.reload()">Reload Game</button>
            </div>
        `,document.body.appendChild(t)}destroy(){this.gameState.running=!1,this.defenseManager&&this.defenseManager.destroy(),this.screenManager&&this.screenManager.destroy(),this.uiManager&&this.uiManager.destroy(),this.systemManager&&this.systemManager.shutdown(),console.log("[Game] Game destroyed")}}typeof module<"u"&&module.exports?module.exports=c:window.Game=c;export{c as default};
