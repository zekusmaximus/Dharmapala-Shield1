import{_ as w,U as h}from"./index-YGHXWetw.js";class S{constructor(){this.currentScreen="loading",this.previousScreen=null,this.screens=new Map,this.modalStack=[],this.callbacks=new Map,this.setupScreens(),this.setupEventListeners(),this.hideAllScreens()}hideAllScreens(){document.querySelectorAll(".screen").forEach(t=>{t.id!=="loading-screen"&&(t.style.display="none",t.classList.remove("active"),console.log(`[ScreenManager] Hiding screen: ${t.id}`))}),console.log("[ScreenManager] All screens hidden initially")}setupScreens(){const e={loading:{element:"loading-screen",init:()=>this.initLoadingScreen()},"main-menu":{element:"main-menu-screen",init:()=>this.initMainMenuScreen()},game:{element:"game-screen",init:()=>this.initGameScreen()},achievements:{element:"achievement-gallery-screen",init:()=>this.initAchievementScreen()},settings:{element:"settings-screen",init:()=>this.initSettingsScreen()},"save-load":{element:"save-load-screen",init:()=>this.initSaveLoadScreen()},tutorial:{element:"tutorialScreen",init:()=>this.initTutorialScreen()},credits:{element:"creditsScreen",init:()=>this.initCreditsScreen()},"level-select":{element:"levelSelectScreen",init:()=>this.initLevelSelectScreen()},victory:{element:"victoryScreen",init:()=>this.initVictoryScreen()},defeat:{element:"defeatScreen",init:()=>this.initDefeatScreen()},"upgrade-tree":{element:"upgrade-tree-modal",init:()=>this.initUpgradeTreeScreen(),isModal:!0},"boss-warning":{element:"boss-warning-modal",init:()=>this.initBossWarningScreen(),isModal:!0},"pause-menu":{element:"pause-menu-overlay",init:()=>this.initPauseMenuScreen(),isModal:!0}};for(const[t,s]of Object.entries(e)){const n=document.getElementById(s.element);n?this.screens.set(t,{element:n,init:s.init,isModal:s.isModal||!1,initialized:!1}):console.warn(`[ScreenManager] Screen element not found: ${s.element}`)}}setupEventListeners(){this.addClickListener("start-game-btn",()=>this.startNewGame()),this.addClickListener("continue-game-btn",()=>this.continueGame()),this.addClickListener("levelSelectBtn",()=>this.showScreen("level-select")),this.addClickListener("save-load-btn",()=>this.showScreen("save-load")),this.addClickListener("tutorialBtn",()=>this.showScreen("tutorial")),this.addClickListener("achievements-btn",()=>this.showScreen("achievements")),this.addClickListener("settings-btn",()=>this.showScreen("settings")),this.addClickListener("creditsBtn",()=>this.showScreen("credits")),this.addClickListener("main-menu-btn",()=>this.showScreen("main-menu")),this.addClickListener("tutorial-btn",()=>this.showScreen("tutorial")),this.addClickListener("achievements-btn-header",()=>this.showScreen("achievements")),this.addClickListener("settings-btn-header",()=>this.showScreen("settings")),this.addClickListener("credits-btn-header",()=>this.showScreen("credits")),this.addClickListener("back-to-menu-btn",()=>this.showScreen("main-menu")),this.addClickListener("back-from-achievements",()=>this.showScreen("main-menu")),this.addClickListener("back-from-settings",()=>this.showScreen("main-menu")),this.addClickListener("back-from-save-load",()=>this.showScreen("main-menu")),this.addClickListener("backFromTutorialBtn",()=>this.showScreen("main-menu")),this.addClickListener("backFromCreditsBtn",()=>this.showScreen("main-menu")),this.addClickListener("backFromLevelSelectBtn",()=>this.showScreen("main-menu")),this.addClickListener("pause-game-btn",()=>this.pauseGame()),this.addClickListener("resume-game-btn",()=>this.resumeGame()),this.addClickListener("return-to-menu-btn",()=>this.returnToMenu()),this.addClickListener("close-upgrade-tree",()=>this.closeModal("upgrade-tree")),this.addClickListener("close-boss-warning",()=>this.closeModal("boss-warning")),document.addEventListener("click",e=>{e.target.classList.contains("modal-overlay")&&this.closeTopModal()}),document.addEventListener("keydown",e=>{e.key==="Escape"&&this.handleEscapeKey()})}addClickListener(e,t){const s=document.getElementById(e);s?(console.log(`[ScreenManager] Adding click listener for: ${e}`),s.addEventListener("click",n=>{console.log(`[ScreenManager] Button clicked: ${e}`),t(n)})):console.warn(`[ScreenManager] Element not found for click listener: ${e}`)}showScreen(e,t={}){if(console.log(`[ScreenManager] Attempting to show screen: ${e}`),!this.screens.has(e))return console.warn(`[ScreenManager] Unknown screen: ${e}`),!1;const s=this.screens.get(e);if(s.isModal)return this.showModal(e,t);try{this.screens.forEach((a,r)=>{if(!a.isModal&&a.element)try{a.element.style.display="none",a.element.classList.remove("active"),console.log(`[ScreenManager] Hiding screen: ${r}`)}catch(o){console.warn(`[ScreenManager] Error hiding screen ${r}:`,o)}});const n=document.getElementById("loading-screen");if(n&&(n.style.display="none",n.classList.remove("active"),console.log("[ScreenManager] Loading screen hidden")),!s.initialized)try{s.init(),s.initialized=!0}catch(a){console.warn(`[ScreenManager] Error initializing screen ${e}:`,a)}const i="flex";return s.element.style.display=i,s.element.classList.add("active"),console.log(`[ScreenManager] Showing screen: ${e}`),this.manageBodyOverflow(e),this.previousScreen=this.currentScreen,this.currentScreen=e,this.triggerCallback("screenChanged",{from:this.previousScreen,to:e}),!0}catch(n){return console.error(`[ScreenManager] Error showing screen ${e}:`,n),!1}}manageBodyOverflow(e){try{e==="game"?(document.body.style.overflow="hidden",console.log("[ScreenManager] Body overflow set to hidden for game screen")):(document.body.style.overflow="auto",console.log(`[ScreenManager] Body overflow set to auto for screen: ${e}`))}catch(t){console.warn("[ScreenManager] Error managing body overflow:",t),document.body.style.overflow="auto"}}showMainMenuDirect(){console.log("[ScreenManager] Using shared main menu display");const e=Utils.dom.showMainMenuDirect();return e&&(this.currentScreen="main-menu",this.manageBodyOverflow("main-menu")),e}showModal(e,t={}){if(!this.screens.has(e))return console.warn(`[ScreenManager] Unknown modal: ${e}`),!1;const s=this.screens.get(e);return s.isModal?(s.initialized||(s.init(),s.initialized=!0),s.element.style.display=t.display||"flex",s.element.classList.remove("hidden"),s.element.style.zIndex=1e3+this.modalStack.length,this.modalStack.push(e),this.triggerCallback("modalOpened",{modal:e,options:t}),console.log(`[ScreenManager] Opened modal: ${e}`),!0):(console.warn(`[ScreenManager] ${e} is not a modal screen`),!1)}closeModal(e){if(!e)return this.closeTopModal();const t=this.screens.get(e);if(!t||!t.isModal)return console.warn(`[ScreenManager] Invalid modal: ${e}`),!1;t.element.style.display="none",t.element.classList.add("hidden");const s=this.modalStack.indexOf(e);return s>-1&&this.modalStack.splice(s,1),this.modalStack.length===0&&this.manageBodyOverflow(this.currentScreen),this.triggerCallback("modalClosed",{modal:e}),console.log(`[ScreenManager] Closed modal: ${e}`),!0}closeTopModal(){if(this.modalStack.length===0)return!1;const e=this.modalStack[this.modalStack.length-1];return this.closeModal(e)}closeAllModals(){for(;this.modalStack.length>0;)this.closeTopModal()}handleEscapeKey(){this.modalStack.length>0?this.closeTopModal():this.currentScreen==="game"&&this.pauseGame()}initLoadingScreen(){console.log("[ScreenManager] Loading screen initialized")}initMainMenuScreen(){this.updateContinueButton(),console.log("[ScreenManager] Main menu screen initialized")}initGameScreen(){this.setupGameHUD(),console.log("[ScreenManager] Game screen initialized")}initAchievementScreen(){this.loadAchievements(),console.log("[ScreenManager] Achievement screen initialized")}initSettingsScreen(){this.setupSettingsControls(),console.log("[ScreenManager] Settings screen initialized")}initSaveLoadScreen(){this.loadSaveSlotInfo(),console.log("[ScreenManager] Save/Load screen initialized")}initTutorialScreen(){this.currentTutorialStep=1,this.totalTutorialSteps=8,this.tutorialStepsContainer=document.querySelector(".tutorial-steps"),this.tutorialProgress=document.getElementById("tutorialProgress"),this.prevBtn=document.getElementById("prevTutorialBtn"),this.nextBtn=document.getElementById("nextTutorialBtn"),this.generateTutorialSteps(),this.prevBtn&&this.prevBtn.addEventListener("click",()=>this.previousTutorialStep()),this.nextBtn&&this.nextBtn.addEventListener("click",()=>this.nextTutorialStep()),this.updateTutorialDisplay(),console.log("[ScreenManager] Tutorial screen initialized with",this.totalTutorialSteps,"steps")}generateTutorialSteps(){const e=[{title:"🙏 Welcome to the Digital Monastery",content:`
                    <p>Greetings, aspiring cyber-monk! You have entered the sacred digital realm where ancient Buddhist wisdom meets cutting-edge technology. Your mission is to protect the network servers from waves of digital corruption using mindful defense strategies.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Philosophy:</strong> In Dharmapala Shield, we practice compassionate protection - defenses redirect and purify threats rather than destroying them.</p>
                    </div>
                `},{title:"💎 Understanding Resources",content:`
                    <p>As a digital monk, you manage three sacred resources that power your defenses:</p>
                    <div class="tutorial-resources-grid">
                        <div class="resource-item">
                            <span class="resource-icon">💎</span>
                            <div class="resource-name">Dharma</div>
                            <div class="resource-description">Primary currency for placing and upgrading defenses. Earned by purifying digital threats.</div>
                        </div>
                        <div class="resource-item">
                            <span class="resource-icon">📡</span>
                            <div class="resource-name">Bandwidth</div>
                            <div class="resource-description">Required for advanced defenses and special abilities. Manages network capacity.</div>
                        </div>
                        <div class="resource-item">
                            <span class="resource-icon">👤</span>
                            <div class="resource-name">Anonymity</div>
                            <div class="resource-description">Rare resource needed for elite cyber-monk defenses. Protects your network identity.</div>
                        </div>
                    </div>
                    <div class="tutorial-highlight">
                        <p><strong>Tip:</strong> Resources regenerate over time. Balance spending with patience for optimal monastery management.</p>
                    </div>
                `},{title:"🏯 Defense Types - Your Digital Arsenal",content:`
                    <p>Each defense type embodies different aspects of Buddhist wisdom:</p>
                    <div class="defense-grid">
                        <div class="defense-preview">
                            <span class="defense-icon">🏯</span>
                            <div class="defense-name">Firewall</div>
                            <div class="defense-cost">25 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">🏛️</span>
                            <div class="defense-name">Encryption</div>
                            <div class="defense-cost">40 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">🕌</span>
                            <div class="defense-name">Decoy</div>
                            <div class="defense-cost">30 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">🏢</span>
                            <div class="defense-name">Mirror</div>
                            <div class="defense-cost">35 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">👻</span>
                            <div class="defense-name">Anonymity</div>
                            <div class="defense-cost">45 💎</div>
                        </div>
                        <div class="defense-preview">
                            <span class="defense-icon">⚖️</span>
                            <div class="defense-name">Distributor</div>
                            <div class="defense-cost">50 💎</div>
                        </div>
                    </div>
                    <div class="tutorial-highlight">
                        <p><strong>Strategy:</strong> Combine different defense types for maximum effectiveness. Each serves a unique purpose in your digital defense mandala.</p>
                    </div>
                `},{title:"👾 Digital Threats - Know Your Adversaries",content:`
                    <p>The digital realm faces various forms of corruption, each requiring different approaches:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>Script Kiddies</strong> - Fast, erratic attackers with unpredictable movement patterns</li>
                        <li><strong>Federal Agents</strong> - Heavily armored, persistent, and find alternate routes when blocked</li>
                        <li><strong>Corporate Saboteurs</strong> - Can become invisible and move faster temporarily</li>
                        <li><strong>AI Surveillance</strong> - Marks defenses for increased damage with scanning capabilities</li>
                        <li><strong>Quantum Hackers</strong> - Advanced enemies that can phase through defenses</li>
                        <li><strong>Corrupted Monks</strong> - Heal nearby enemies and spread digital corruption</li>
                    </ul>
                    <div class="tutorial-highlight">
                        <p><strong>Wisdom:</strong> Understanding your opponent is the first step to compassionate resolution. Each enemy type requires different defensive strategies.</p>
                    </div>
                `},{title:"🎮 Controls - Mastering the Interface",content:`
                    <p>Learn the sacred gestures to command your digital monastery:</p>
                    <div class="control-keys">
                        <div class="key-binding">
                            <span class="key">Left Click</span>
                            <span class="key-action">Place defense / Select UI</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">Right Click</span>
                            <span class="key-action">Cancel placement</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">Space</span>
                            <span class="key-action">Pause/Resume game</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">ESC</span>
                            <span class="key-action">Open main menu</span>
                        </div>
                        <div class="key-binding">
                            <span class="key">Mouse Wheel</span>
                            <span class="key-action">Zoom in/out</span>
                        </div>
                    </div>
                    <p><strong>Mobile Controls:</strong> Tap to place, hold for info, pinch to zoom, swipe to pan.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Meditation:</strong> Smooth, deliberate actions lead to better strategic outcomes than frantic clicking.</p>
                    </div>
                `},{title:"⚡ Boss Encounters - Ultimate Challenges",content:`
                    <p>Powerful entities threaten the digital realm with devastating abilities:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>Raid Team</strong> - Multi-phase boss that spawns minions and uses EMP bursts to disable defenses</li>
                        <li><strong>MegaCorp Titan</strong> - Massive entity with shield regeneration and drone swarm deployment</li>
                        <li><strong>Corrupted Monk</strong> - Fallen digital monk with corruption fields and meditation storms</li>
                    </ul>
                    <p>Boss encounters feature multiple phases with increasing difficulty and new abilities as their health decreases.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Warning System:</strong> Bosses telegraph their powerful abilities with visual warnings. Use this time to prepare your defenses!</p>
                    </div>
                `},{title:"🏆 Achievements - Path of Progress",content:`
                    <p>Your journey as a cyber-monk is measured through achievements across five categories:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>First Steps</strong> - Beginning your digital meditation journey</li>
                        <li><strong>Combat Mastery</strong> - Perfecting defensive techniques</li>
                        <li><strong>Strategic Genius</strong> - Advanced tactical achievements</li>
                        <li><strong>Progression</strong> - Advancing through levels and waves</li>
                        <li><strong>Hidden Secrets</strong> - Discovering hidden aspects of the digital realm</li>
                    </ul>
                    <p>Achievements provide long-term goals and unlock special recognition for your accomplishments.</p>
                    <div class="tutorial-highlight">
                        <p><strong>Mindfulness:</strong> Focus on the present moment rather than chasing achievements. They will come naturally through dedicated practice.</p>
                    </div>
                `},{title:"🌟 Begin Your Journey",content:`
                    <p>You are now ready to begin your path as a digital guardian. Remember these core principles:</p>
                    <ul style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>Compassionate Protection</strong> - Defend without aggression</li>
                        <li><strong>Mindful Strategy</strong> - Think before you place each defense</li>
                        <li><strong>Resource Wisdom</strong> - Balance spending with patience</li>
                        <li><strong>Adaptive Learning</strong> - Each enemy teaches you something new</li>
                        <li><strong>Present Awareness</strong> - Stay focused on the current wave</li>
                    </ul>
                    <div class="tutorial-highlight">
                        <p><strong>Final Wisdom:</strong> "In the digital realm, as in life, compassionate protection guards against suffering. May your defenses be strong and your meditation deep." 🧘‍♂️✨</p>
                    </div>
                    <p style="text-align: center; margin-top: 30px;">
                        <strong>Click "Start Campaign" from the main menu to begin your first level!</strong>
                    </p>
                `}];this.tutorialStepsContainer&&(this.tutorialStepsContainer.innerHTML="",e.forEach((t,s)=>{const n=document.createElement("div");n.className="tutorial-step",n.setAttribute("data-step",s+1),s===0&&n.classList.add("active"),n.innerHTML=`
                    <div class="step-content">
                        <h3>${t.title}</h3>
                        ${t.content}
                    </div>
                `,this.tutorialStepsContainer.appendChild(n)}))}nextTutorialStep(){this.currentTutorialStep<this.totalTutorialSteps&&(this.currentTutorialStep++,this.updateTutorialDisplay())}previousTutorialStep(){this.currentTutorialStep>1&&(this.currentTutorialStep--,this.updateTutorialDisplay())}updateTutorialDisplay(){this.tutorialProgress&&(this.tutorialProgress.textContent=`${this.currentTutorialStep} / ${this.totalTutorialSteps}`),this.prevBtn&&(this.prevBtn.disabled=this.currentTutorialStep===1),this.nextBtn&&(this.nextBtn.disabled=this.currentTutorialStep===this.totalTutorialSteps),document.querySelectorAll(".tutorial-step").forEach((t,s)=>{s+1===this.currentTutorialStep?t.classList.add("active"):t.classList.remove("active")}),console.log(`[ScreenManager] Tutorial step ${this.currentTutorialStep} displayed`)}initCreditsScreen(){console.log("[ScreenManager] Credits screen initialized")}initLevelSelectScreen(){this.loadLevelInfo(),console.log("[ScreenManager] Level select screen initialized")}initVictoryScreen(){console.log("[ScreenManager] Victory screen initialized")}initDefeatScreen(){console.log("[ScreenManager] Defeat screen initialized")}initUpgradeTreeScreen(){console.log("[ScreenManager] Upgrade tree modal initialized")}initBossWarningScreen(){console.log("[ScreenManager] Boss warning modal initialized")}initPauseMenuScreen(){console.log("[ScreenManager] Pause menu modal initialized")}startNewGame(){console.log("[ScreenManager] startNewGame() called"),this.triggerCallback("startNewGame"),this.showScreen("game"),console.log("[ScreenManager] Starting new game, switching to game screen")}continueGame(){this.triggerCallback("continueGame"),this.showScreen("game"),console.log("[ScreenManager] Continuing game, switching to game screen")}pauseGame(){this.triggerCallback("pauseGame"),this.showModal("pause-menu")}resumeGame(){this.triggerCallback("resumeGame"),this.closeModal("pause-menu")}returnToMenu(){this.triggerCallback("returnToMenu"),this.closeAllModals(),this.showScreen("main-menu")}updateContinueButton(){const e=document.getElementById("continue-game-btn");if(e&&window.saveSystem){const t=window.saveSystem.getMostRecentSave()!==null;e.disabled=!t,e.style.opacity=t?"1":"0.5"}}setupGameHUD(){["dharma-display","bandwidth-display","anonymity-display","wave-display","level-display"].forEach(t=>{document.getElementById(t)||console.warn(`[ScreenManager] HUD element not found: ${t}`)})}loadAchievements(){var t;const e=(t=window.gameSystemManager)==null?void 0:t.getAchievementManager();e&&this.triggerCallback("loadAchievements",{achievementManager:e})}setupSettingsControls(){this.setupVolumeControls(),this.setupGameplaySettings()}setupVolumeControls(){[{id:"master-volume",callback:"setMasterVolume"},{id:"music-volume",callback:"setMusicVolume"},{id:"sfx-volume",callback:"setSfxVolume"}].forEach(t=>{const s=document.getElementById(t.id);s&&s.addEventListener("input",n=>{const i=parseFloat(n.target.value);this.triggerCallback(t.callback,{value:i})})})}setupGameplaySettings(){[{id:"screen-flash-toggle",callback:"setScreenFlash"},{id:"reduce-motion-toggle",callback:"setReduceMotion"}].forEach(t=>{const s=document.getElementById(t.id);s&&s.addEventListener("change",n=>{this.triggerCallback(t.callback,{value:n.target.checked})})})}loadSaveSlotInfo(){if(window.saveSystem){const e=window.saveSystem.getAllSaveInfo();this.triggerCallback("loadSaveSlots",{saveInfo:e})}}loadLevelInfo(){this.triggerCallback("loadLevelInfo")}on(e,t){this.callbacks.has(e)||this.callbacks.set(e,[]),this.callbacks.get(e).push(t)}off(e,t){if(this.callbacks.has(e)){const s=this.callbacks.get(e),n=s.indexOf(t);n>-1&&s.splice(n,1)}}triggerCallback(e,t={}){if(this.callbacks.has(e)){const s=this.callbacks.get(e);for(const n of s)try{n(t)}catch(i){console.error(`[ScreenManager] Error in callback for ${e}:`,i)}}}getCurrentScreen(){return this.currentScreen}getPreviousScreen(){return this.previousScreen}isModalOpen(e=null){return e?this.modalStack.includes(e):this.modalStack.length>0}getOpenModals(){return[...this.modalStack]}updateResourceDisplay(e){const t={dharma:"dharma-display",bandwidth:"bandwidth-display",anonymity:"anonymity-display"};for(const[s,n]of Object.entries(t)){const i=document.getElementById(n);i&&e[s]!==void 0&&(i.textContent=Utils.game.formatNumber(e[s]))}}updateWaveDisplay(e,t){const s=document.getElementById("wave-display");s&&(s.textContent=`Wave ${e}/${t}`)}updateLevelDisplay(e){const t=document.getElementById("level-display");t&&(t.textContent=`Level ${e}`)}showBossWarning(e){const t=this.screens.get("boss-warning");if(t){const s=t.element.querySelector(".boss-title"),n=t.element.querySelector(".boss-description");s&&(s.textContent=e.name||"Boss Approaching"),n&&(n.textContent=e.description||"Prepare for battle!"),this.showModal("boss-warning"),setTimeout(()=>{this.closeModal("boss-warning")},3e3)}}destroy(){this.callbacks.clear(),this.modalStack.length=0,this.screens.clear()}}class p{constructor(){this.defenses=[],this.selectedDefense=null,this.selectedDefenseType="firewall",this.placementMode=!1,this.hoveredDefense=null,this.defenseStats=new Map,this.defensePool=new Map,this.callbacks=new Map,this.initializeDefenseTypes(),this.setupEventListeners()}initializeDefenseTypes(){this.defenseTypes={firewall:{name:"Firewall",cost:{dharma:50,bandwidth:0,anonymity:0},damage:25,range:80,fireRate:1,color:"#ff6b6b",description:"Basic defense that blocks digital threats"},encryption:{name:"Encryption Node",cost:{dharma:75,bandwidth:25,anonymity:0},damage:40,range:70,fireRate:.8,color:"#4ecdc4",description:"Encrypts attacks, dealing higher damage"},decoy:{name:"Decoy Server",cost:{dharma:60,bandwidth:0,anonymity:30},damage:15,range:100,fireRate:1.5,color:"#45b7d1",description:"Attracts enemies and fires rapidly"},mirror:{name:"Mirror Defense",cost:{dharma:100,bandwidth:50,anonymity:25},damage:60,range:60,fireRate:.6,color:"#f9ca24",description:"Reflects attacks with powerful counterstrikes"},anonymity:{name:"Anonymity Cloak",cost:{dharma:80,bandwidth:30,anonymity:50},damage:30,range:90,fireRate:1.2,color:"#6c5ce7",description:"Cloaked defense with stealth attacks"},distributor:{name:"Load Distributor",cost:{dharma:150,bandwidth:75,anonymity:0},damage:45,range:120,fireRate:.9,color:"#ffd700",description:"Distributes processing load, high range"}}}setupEventListeners(){console.log("[DefenseManager] Setting up event listeners for defense items");const e=document.querySelectorAll(".defense-item");console.log(`[DefenseManager] Found ${e.length} defense items`),e.forEach((t,s)=>{const n=t.dataset.type;console.log(`[DefenseManager] Setting up listener for defense item ${s}: ${n}`),n?(t.addEventListener("click",i=>{console.log(`[DefenseManager] Defense item clicked: ${n}`),this.selectDefenseType(n),i.preventDefault(),i.stopPropagation()}),t.addEventListener("mouseenter",()=>{t.style.transform="scale(1.05)",t.style.cursor="pointer"}),t.addEventListener("mouseleave",()=>{t.style.transform="scale(1)"})):console.warn(`[DefenseManager] Defense item ${s} missing data-type attribute`)}),this.setupActionButtons()}setupActionButtons(){[{id:"sell-defense-btn",handler:()=>this.sellSelectedDefense()},{id:"upgrade-defense-btn",handler:()=>this.upgradeSelectedDefense()},{id:"show-upgrade-tree-btn",handler:()=>this.showUpgradeTree()},{id:"toggle-targeting-btn",handler:()=>this.toggleTargeting()}].forEach(t=>{const s=document.getElementById(t.id);s&&s.addEventListener("click",t.handler)})}selectDefenseType(e){if(!this.defenseTypes[e]){console.warn(`[DefenseManager] Unknown defense type: ${e}`);return}this.selectedDefenseType=e,this.placementMode=!0,this.selectedDefense=null,this.updateDefenseSelection(),this.triggerCallback("defenseTypeSelected",{type:e}),console.log(`[DefenseManager] Selected defense type: ${e}`)}canPlaceDefense(e,t,s){const n=this.defenseTypes[s];return!(!n||!this.isValidPlacement(e,t)||!this.hasEnoughResources(n.cost))}placeDefense(e,t,s=this.selectedDefenseType){if(!this.canPlaceDefense(e,t,s))return console.warn(`[DefenseManager] Cannot place defense at (${e}, ${t})`),null;const n=this.defenseTypes[s],i=this.createDefense(e,t,s,n);return this.defenses.push(i),this.deductResources(n.cost),this.updateDefenseStats(s,"placed"),this.triggerCallback("defensePlace",{defense:i,cost:n.cost}),this.placementMode=!1,console.log(`[DefenseManager] Placed ${s} defense at (${e}, ${t})`),i}createDefense(e,t,s,n){return{id:Utils.game.generateId(),x:e,y:t,type:s,level:1,damage:n.damage,range:n.range,fireRate:n.fireRate,color:n.color,lastFired:0,target:null,kills:0,totalDamage:0,angle:0,size:20,canFire:function(){return Utils.performance.now()-this.lastFired>=1e3/this.fireRate},fire:function(a){var o;return this.canFire()?(this.lastFired=Utils.performance.now(),this.target=a,this.angle=Utils.math.angle(this.x,this.y,a.x,a.y),(o=window.projectilePool)==null?void 0:o.getProjectile(this.x,this.y,a,this.damage,260,"normal",this.type)):null},upgrade:function(){this.level++,this.damage*=1.2,this.range*=1.1,this.fireRate*=1.1},takeDamage:function(a){return!1}}}selectDefense(e){this.selectedDefense=e,this.placementMode=!1,this.updateDefenseInfo(),this.triggerCallback("defenseSelected",{defense:e})}deselectDefense(){this.selectedDefense=null,this.updateDefenseInfo(),this.triggerCallback("defenseDeselected")}sellSelectedDefense(){if(!this.selectedDefense)return;const e=this.selectedDefense,t=this.calculateSellValue(e),s=this.defenses.indexOf(e);s>-1&&this.defenses.splice(s,1),this.refundResources(t),this.updateDefenseStats(e.type,"sold"),this.triggerCallback("defenseSold",{defense:e,refund:t}),this.deselectDefense(),console.log(`[DefenseManager] Sold ${e.type} defense for`,t)}upgradeSelectedDefense(){if(!this.selectedDefense)return;const e=this.selectedDefense,t=this.calculateUpgradeCost(e);if(!this.hasEnoughResources(t)){console.warn("[DefenseManager] Not enough resources to upgrade"),this.triggerCallback("upgradeFailure",{reason:"insufficient_resources"});return}this.deductResources(t),e.upgrade(),this.updateDefenseStats(e.type,"upgraded"),this.triggerCallback("defenseUpgraded",{defense:e,cost:t}),this.updateDefenseInfo(),console.log(`[DefenseManager] Upgraded ${e.type} to level ${e.level}`)}showUpgradeTree(){this.selectedDefense&&this.triggerCallback("showUpgradeTree",{defense:this.selectedDefense})}toggleTargeting(){if(!this.selectedDefense)return;const e=["first","last","strongest","weakest"],t=this.selectedDefense.targetingMode||"first",n=(e.indexOf(t)+1)%e.length;this.selectedDefense.targetingMode=e[n],this.triggerCallback("targetingChanged",{defense:this.selectedDefense,mode:this.selectedDefense.targetingMode}),this.updateDefenseInfo()}update(e,t){for(const s of this.defenses)this.updateDefense(s,e,t);this.placementMode&&this.updatePlacementPreview()}updateDefense(e,t,s){const n=this.findTarget(e,s);if(n&&e.canFire()){const i=e.fire(n);i&&this.triggerCallback("defenseFireProjectile",{defense:e,projectile:i,target:n})}}findTarget(e,t){const s=t.filter(i=>i.isAlive?Utils.math.distance(e.x,e.y,i.x,i.y)<=e.range:!1);if(s.length===0)return null;const n=e.targetingMode||"first";switch(s.sort((i,a)=>{const r=Utils.math.distance(e.x,e.y,i.x+(i.velocityX||0)*.25,i.y+(i.velocityY||0)*.25),o=Utils.math.distance(e.x,e.y,a.x+(a.velocityX||0)*.25,a.y+(a.velocityY||0)*.25);return r-o}),n){case"first":return s.reduce((i,a)=>a.pathProgress>i.pathProgress?a:i);case"last":return s.reduce((i,a)=>a.pathProgress<i.pathProgress?a:i);case"strongest":return s.reduce((i,a)=>a.health>i.health?a:i);case"weakest":return s.reduce((i,a)=>a.health<i.health?a:i);default:return s[0]}}render(e){for(const t of this.defenses)this.renderDefense(e,t);this.renderSelectionIndicators(e),this.placementMode&&this.renderPlacementPreview(e)}renderDefense(e,t){if(window.spriteManager){const s=`defense_${t.type}_level${t.level}`;if(window.spriteManager.hasSprite(s)){window.spriteManager.drawSprite(e,s,t.x-t.size,t.y-t.size,t.size*2,t.size*2,t.angle);return}}e.save(),e.translate(t.x,t.y),e.rotate(t.angle),e.fillStyle=t.color,e.strokeStyle="#ffffff",e.lineWidth=2,e.fillRect(-t.size/2,-t.size/2,t.size,t.size),e.strokeRect(-t.size/2,-t.size/2,t.size,t.size),e.fillStyle="#ffffff",e.font="12px Orbitron",e.textAlign="center",e.fillText(t.level.toString(),0,4),e.restore()}renderSelectionIndicators(e){if(this.selectedDefense){const t=this.selectedDefense;e.strokeStyle="#00d4ff",e.lineWidth=3,e.beginPath(),e.arc(t.x,t.y,t.size+5,0,Math.PI*2),e.stroke(),e.strokeStyle="#00d4ff",e.lineWidth=1,e.globalAlpha=.3,e.beginPath(),e.arc(t.x,t.y,t.range,0,Math.PI*2),e.stroke(),e.globalAlpha=1}}renderPlacementPreview(e){if(!window.inputManager)return;const t=window.inputManager.getMouseWorldPosition(),s=this.canPlaceDefense(t.x,t.y,this.selectedDefenseType);e.save(),e.globalAlpha=.7;const n=this.defenseTypes[this.selectedDefenseType];e.fillStyle=s?n.color:"#ff0000",e.strokeStyle="#ffffff",e.lineWidth=2;const i=20;e.fillRect(t.x-i/2,t.y-i/2,i,i),e.strokeRect(t.x-i/2,t.y-i/2,i,i),e.strokeStyle=s?n.color:"#ff0000",e.lineWidth=1,e.beginPath(),e.arc(t.x,t.y,n.range,0,Math.PI*2),e.stroke(),e.restore()}isValidPlacement(e,t){if(this.isOnPath(e,t))return!1;const s=40;for(const n of this.defenses)if(Utils.math.distance(e,t,n.x,n.y)<s)return!1;return!0}isOnPath(e,t){var a;const s=(a=window.gameSystemManager)==null?void 0:a.getLevelManager();if(!s)return!1;const n=s.getCurrentPath();if(!n)return!1;const i=30;for(let r=0;r<n.length-1;r++)if(this.distanceToLineSegment(e,t,n[r].x,n[r].y,n[r+1].x,n[r+1].y)<i)return!0;return!1}distanceToLineSegment(e,t,s,n,i,a){const r=i-s,o=a-n,l=Math.sqrt(r*r+o*o);if(l===0)return Utils.math.distance(e,t,s,n);const d=Math.max(0,Math.min(1,((e-s)*r+(t-n)*o)/(l*l))),m=s+d*r,f=n+d*o;return Utils.math.distance(e,t,m,f)}hasEnoughResources(e){return this.triggerCallback("checkResources",{cost:e})!==!1}deductResources(e){this.triggerCallback("deductResources",{cost:e})}refundResources(e){this.triggerCallback("refundResources",{refund:e})}calculateSellValue(e){const t=this.defenseTypes[e.type],s=.7;return{dharma:Math.floor(t.cost.dharma*s*e.level),bandwidth:Math.floor(t.cost.bandwidth*s*e.level),anonymity:Math.floor(t.cost.anonymity*s*e.level)}}calculateUpgradeCost(e){const t=this.defenseTypes[e.type],s=Math.pow(1.5,e.level-1);return{dharma:Math.floor(t.cost.dharma*s),bandwidth:Math.floor(t.cost.bandwidth*s),anonymity:Math.floor(t.cost.anonymity*s)}}updateDefenseSelection(){for(const e in this.defenseTypes){const t=document.getElementById(`${e}-defense-btn`);t&&t.classList.toggle("selected",e===this.selectedDefenseType)}}updateDefenseInfo(){const e=document.getElementById("defense-info-panel");e&&(this.selectedDefense?this.showDefenseDetails(e,this.selectedDefense):e.style.display="none")}showDefenseDetails(e,t){const s=this.defenseTypes[t.type];e.innerHTML=`
            <h3>${s.name} (Level ${t.level})</h3>
            <p>${s.description}</p>
            <div class="defense-stats">
                <div>Damage: ${Math.floor(t.damage)}</div>
                <div>Range: ${Math.floor(t.range)}</div>
                <div>Fire Rate: ${t.fireRate.toFixed(1)}/s</div>
                <div>Kills: ${t.kills}</div>
                <div>Total Damage: ${Utils.game.formatNumber(t.totalDamage)}</div>
            </div>
        `,e.style.display="block"}updateDefenseStats(e,t){this.defenseStats.has(e)||this.defenseStats.set(e,{placed:0,sold:0,upgraded:0,kills:0,damage:0});const s=this.defenseStats.get(e);s[t]!==void 0&&s[t]++}updatePlacementPreview(){}on(e,t){this.callbacks.has(e)||this.callbacks.set(e,[]),this.callbacks.get(e).push(t)}triggerCallback(e,t={}){if(this.callbacks.has(e)){const s=this.callbacks.get(e);for(const n of s)try{const i=n(t);if(i!==void 0)return i}catch(i){console.error(`[DefenseManager] Error in callback for ${e}:`,i)}}}getDefenseCount(){return this.defenses.length}getDefensesByType(e){return this.defenses.filter(t=>t.type===e)}getTotalDefenseValue(){return this.defenses.reduce((e,t)=>{const s=this.defenseTypes[t.type];return e+s.cost.dharma*t.level},0)}getDefenseStats(){const e={};for(const[t,s]of this.defenseStats)e[t]={...s};return e}clear(){this.defenses.length=0,this.selectedDefense=null,this.placementMode=!1,this.defenseStats.clear()}destroy(){this.clear(),this.callbacks.clear()}}typeof module<"u"&&module.exports?module.exports=p:window.DefenseManager=p;class u{constructor(){this.elements=new Map,this.animations=new Map,this.notifications=[],this.tooltips=new Map,this.resources={dharma:0,bandwidth:0,anonymity:0},this.gameState={level:1,wave:1,score:0},this.setupElements(),this.setupEventHandlers()}setupElements(){this.registerElement("dharma-display","text"),this.registerElement("bandwidth-display","text"),this.registerElement("anonymity-display","text"),this.registerElement("level-display","text"),this.registerElement("wave-display","text"),this.registerElement("score-display","text"),this.registerElement("lives-display","text"),this.registerElement("wave-progress-bar","progress"),this.registerElement("boss-health-bar","progress"),this.registerElement("start-wave-btn","button"),this.registerElement("pause-game-btn","button"),this.registerElement("speed-up-btn","button"),this.registerElement("speed-normal-btn","button"),this.registerElement("defense-info-panel","container"),this.registerElement("defense-selection-panel","container"),this.registerElement("upgrade-tree-panel","container"),this.registerElement("notification-area","container"),this.registerElement("achievement-popup","container"),this.registerElement("game-menu","container"),this.registerElement("settings-panel","container")}registerElement(e,t){const s=document.getElementById(e);s?this.elements.set(e,{element:s,type:t,visible:!s.classList.contains("hidden")}):console.warn(`[UIManager] Element not found: ${e}`)}setupEventHandlers(){this.addClickHandler("speed-up-btn",()=>this.setGameSpeed(2)),this.addClickHandler("speed-normal-btn",()=>this.setGameSpeed(1)),this.addClickHandler("start-wave-btn",()=>this.startNextWave()),this.addClickHandler("pause-game-btn",()=>this.togglePause()),this.setupTooltips(),this.setupKeyboardShortcuts(),this.setupDefenseSelection()}addClickHandler(e,t){const s=this.elements.get(e);s&&s.element.addEventListener("click",t)}setupTooltips(){["firewall","encryption","decoy","mirror","anonymity","distributor"].forEach(t=>{const s=document.getElementById(`${t}-defense-btn`);s&&this.setupTooltip(s,this.getDefenseTooltip(t))}),this.setupTooltip("dharma-display","Dharma: Primary currency for defenses"),this.setupTooltip("bandwidth-display","Bandwidth: Required for advanced defenses"),this.setupTooltip("anonymity-display","Anonymity: Powers stealth and special abilities")}setupTooltip(e,t){const s=typeof e=="string"?document.getElementById(e):e;if(!s)return;let n=null;s.addEventListener("mouseenter",i=>{n=this.createTooltip(t,i.pageX,i.pageY)}),s.addEventListener("mouseleave",()=>{n&&(n.remove(),n=null)}),s.addEventListener("mousemove",i=>{n&&(n.style.left=i.pageX+10+"px",n.style.top=i.pageY-30+"px")})}createTooltip(e,t,s){const n=document.createElement("div");return n.className="tooltip",n.innerHTML=e,n.style.cssText=`
            position: absolute;
            left: ${t+10}px;
            top: ${s-30}px;
            background: rgba(26, 26, 46, 0.95);
            color: #00d4ff;
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #00d4ff;
            font-size: 12px;
            font-family: 'Orbitron', monospace;
            z-index: 10000;
            pointer-events: none;
            max-width: 200px;
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
        `,document.body.appendChild(n),n}getDefenseTooltip(e){return{firewall:"<strong>Firewall</strong><br>Cost: 50 Dharma<br>Basic defense against digital threats",encryption:"<strong>Encryption Node</strong><br>Cost: 75 Dharma, 25 Bandwidth<br>High damage encrypted attacks",decoy:"<strong>Decoy Server</strong><br>Cost: 60 Dharma, 30 Anonymity<br>Fast firing, attracts enemies",mirror:"<strong>Mirror Defense</strong><br>Cost: 100 Dharma, 50 Bandwidth, 25 Anonymity<br>Powerful counterattacks",anonymity:"<strong>Anonymity Cloak</strong><br>Cost: 80 Dharma, 30 Bandwidth, 50 Anonymity<br>Stealth attacks",distributor:"<strong>Load Distributor</strong><br>Cost: 150 Dharma, 75 Bandwidth<br>Long range, high damage"}[e]||"Defense information"}setupKeyboardShortcuts(){document.addEventListener("keydown",e=>{if(!(e.target.tagName==="INPUT"||e.target.tagName==="TEXTAREA"))switch(e.key.toLowerCase()){case" ":e.preventDefault(),this.togglePause();break;case"1":case"2":case"3":case"4":case"5":case"6":this.selectDefenseHotkey(parseInt(e.key)-1);break;case"n":this.startNextWave();break;case"escape":this.showGameMenu();break}})}setupDefenseSelection(){const e=document.querySelectorAll(".defense-item[data-type]");e.forEach(t=>{t.addEventListener("click",s=>{const n=t.getAttribute("data-type");console.log(`[UIManager] Defense type selected: ${n}`),e.forEach(a=>a.classList.remove("active")),t.classList.add("active");const i=new CustomEvent("selectDefenseType",{detail:{type:n}});document.dispatchEvent(i)})}),console.log(`[UIManager] Set up defense selection for ${e.length} defense types`)}selectDefenseHotkey(e){const t=["firewall","encryption","decoy","mirror","anonymity","distributor"];if(e<t.length){const s=new CustomEvent("selectDefenseType",{detail:{type:t[e]}});document.dispatchEvent(s)}}updateResources(e){this.resources={...e},this.updateText("dharma-display",Utils.game.formatNumber(e.dharma)),this.updateText("bandwidth-display",Utils.game.formatNumber(e.bandwidth)),this.updateText("anonymity-display",Utils.game.formatNumber(e.anonymity)),this.animateResourceChange("dharma-display"),this.animateResourceChange("bandwidth-display"),this.animateResourceChange("anonymity-display")}animateResourceChange(e){const t=this.elements.get(e);if(!t)return;const s=t.element;s.classList.add("resource-change"),setTimeout(()=>{s.classList.remove("resource-change")},300)}updateGameState(e){this.gameState={...this.gameState,...e},e.level!==void 0&&this.updateText("level-display",`Level ${e.level}`),e.wave!==void 0&&this.updateText("wave-display",`Wave ${e.wave}`),e.score!==void 0&&this.updateText("score-display",Utils.game.formatNumber(e.score)),e.lives!==void 0&&(this.updateText("lives-display",e.lives.toString()),this.animateLivesChange(e.lives))}animateLivesChange(e){var s;const t=(s=this.elements.get("lives-display"))==null?void 0:s.element;t&&(e<=3?t.classList.add("lives-low"):t.classList.remove("lives-low"),e===1?t.classList.add("lives-critical"):t.classList.remove("lives-critical"))}updateProgress(e,t,s=100){const n=this.elements.get(e);if(!n||n.type!=="progress")return;const i=Math.max(0,Math.min(100,t/s*100)),a=n.element.querySelector(".progress-fill");a&&(a.style.width=`${i}%`,e.includes("health")&&(i<25?a.style.background="#ff0000":i<50?a.style.background="#ff6b35":a.style.background="#00ff88"))}updateWaveProgress(e,t){this.updateProgress("wave-progress-bar",e,t);const s=document.querySelector("#wave-progress-bar .progress-text");s&&(s.textContent=`${e}/${t}`)}updateBossHealth(e,t){this.updateProgress("boss-health-bar",e,t),this.showElement("boss-health-bar"),e<=0&&setTimeout(()=>this.hideElement("boss-health-bar"),2e3)}showNotification(e,t="info",s=3e3){const n={id:Utils.game.generateId(),message:e,type:t,timestamp:Utils.performance.now(),duration:s};this.notifications.push(n),this.renderNotification(n),setTimeout(()=>{this.removeNotification(n.id)},s)}renderNotification(e){var n;const t=(n=this.elements.get("notification-area"))==null?void 0:n.element;if(!t)return;const s=document.createElement("div");s.className=`notification notification-${e.type}`,s.id=`notification-${e.id}`,s.innerHTML=`
            <div class="notification-content">${e.message}</div>
            <button class="notification-close" onclick="uiManager.removeNotification('${e.id}')">&times;</button>
        `,t.appendChild(s),setTimeout(()=>s.classList.add("notification-show"),10)}removeNotification(e){const t=document.getElementById(`notification-${e}`);t&&(t.classList.add("notification-hide"),setTimeout(()=>t.remove(),300)),this.notifications=this.notifications.filter(s=>s.id!==e)}showAchievementUnlocked(e){var s;const t=(s=this.elements.get("achievement-popup"))==null?void 0:s.element;t&&(t.innerHTML=`
            <div class="achievement-content">
                <div class="achievement-icon">${e.icon||"🏆"}</div>
                <div class="achievement-text">
                    <h3>Achievement Unlocked!</h3>
                    <p>${e.name}</p>
                    <small>${e.description}</small>
                </div>
            </div>
        `,t.classList.add("achievement-show"),setTimeout(()=>{t.classList.remove("achievement-show")},4e3),window.audioManager&&window.audioManager.playSound("achievement_unlocked"))}setGameSpeed(e){var a;["speed-normal-btn","speed-up-btn"].forEach(r=>{var l;const o=(l=this.elements.get(r))==null?void 0:l.element;o&&o.classList.remove("active")});const s=e===1?"speed-normal-btn":"speed-up-btn",n=(a=this.elements.get(s))==null?void 0:a.element;n&&n.classList.add("active");const i=new CustomEvent("gameSpeedChange",{detail:{speed:e}});document.dispatchEvent(i)}togglePause(){const e=new CustomEvent("togglePause");document.dispatchEvent(e)}startNextWave(){const e=new CustomEvent("startNextWave");document.dispatchEvent(e)}showGameMenu(){const e=new CustomEvent("showGameMenu");document.dispatchEvent(e)}updateText(e,t){const s=this.elements.get(e);s&&s.type==="text"&&(s.element.textContent=t)}showElement(e){const t=this.elements.get(e);t&&(t.element.classList.remove("hidden"),t.element.style.display="",t.visible=!0)}hideElement(e){const t=this.elements.get(e);t&&(t.element.classList.add("hidden"),t.visible=!1)}toggleElement(e){const t=this.elements.get(e);t&&(t.visible?this.hideElement(e):this.showElement(e))}setElementEnabled(e,t){const s=this.elements.get(e);s&&s.type==="button"&&(s.element.disabled=!t,s.element.classList.toggle("disabled",!t))}updateDefenseSelection(e){["firewall","encryption","decoy","mirror","anonymity","distributor"].forEach(s=>{const n=document.getElementById(`${s}-defense-btn`);n&&n.classList.toggle("selected",s===e)})}updateDefenseInfo(e){var s;const t=(s=this.elements.get("defense-info-panel"))==null?void 0:s.element;t&&(e?(t.innerHTML=`
                <h3>${e.type} Defense (Level ${e.level})</h3>
                <div class="defense-stats">
                    <div class="stat">
                        <span class="stat-label">Damage:</span>
                        <span class="stat-value">${Math.floor(e.damage)}</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Range:</span>
                        <span class="stat-value">${Math.floor(e.range)}</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Fire Rate:</span>
                        <span class="stat-value">${e.fireRate.toFixed(1)}/s</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Kills:</span>
                        <span class="stat-value">${e.kills}</span>
                    </div>
                </div>
                <div class="defense-actions">
                    <button id="upgrade-defense" class="button">Upgrade</button>
                    <button id="sell-defense" class="button button-danger">Sell</button>
                </div>
            `,this.showElement("defense-info-panel")):this.hideElement("defense-info-panel"))}updateWaveButton(e,t){var n;const s=(n=this.elements.get("start-wave-btn"))==null?void 0:n.element;s&&(e?(s.disabled=!1,s.textContent=t?`Start Wave ${t.waveNumber}`:"Start Wave",s.classList.remove("disabled")):(s.disabled=!0,s.textContent="Wave in Progress",s.classList.add("disabled")))}flashScreen(e="#ff0000",t=200){const s=document.createElement("div");s.style.cssText=`
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: ${e};
            opacity: 0.3;
            z-index: 9999;
            pointer-events: none;
        `,document.body.appendChild(s),setTimeout(()=>{s.style.opacity="0",s.style.transition="opacity 0.2s ease",setTimeout(()=>s.remove(),200)},t)}destroy(){document.querySelectorAll(".tooltip").forEach(e=>e.remove()),this.notifications.length=0,this.elements.clear(),this.animations.clear()}getUIState(){return{resources:this.resources,gameState:this.gameState,notificationCount:this.notifications.length,elementCount:this.elements.size}}logUIElements(){console.log("[UIManager] Registered elements:");for(const[e,t]of this.elements)console.log(`  ${e}: ${t.type} (${t.visible?"visible":"hidden"})`)}}const b=new u;typeof module<"u"&&module.exports?module.exports=u:(window.UIManager=u,window.uiManager=b);class v{constructor(e,t,s){}}class g{constructor(){this.mouse={x:0,y:0,worldX:0,worldY:0,down:!1,pressed:!1,released:!1,button:-1},this.touch={active:!1,x:0,y:0,worldX:0,worldY:0,startX:0,startY:0,deltaX:0,deltaY:0},this.keyboard={keys:new Set,pressed:new Set,released:new Set},this.canvas=null,this.camera=null,this.listeners=new Map,this.eventQueue=[],this.setupEventListeners()}setCanvas(e){this.canvas&&this.removeCanvasListeners(),this.canvas=e,e&&this.setupCanvasListeners()}setCamera(e){this.camera=e}setupEventListeners(){document.addEventListener("keydown",e=>this.onKeyDown(e)),document.addEventListener("keyup",e=>this.onKeyUp(e)),window.addEventListener("blur",()=>this.onWindowBlur()),window.addEventListener("focus",()=>this.onWindowFocus())}setupCanvasListeners(){this.canvas&&(this.canvas.addEventListener("mousedown",e=>this.onMouseDown(e)),this.canvas.addEventListener("mousemove",e=>this.onMouseMove(e)),this.canvas.addEventListener("mouseup",e=>this.onMouseUp(e)),this.canvas.addEventListener("mouseleave",e=>this.onMouseLeave(e)),this.canvas.addEventListener("wheel",e=>this.onWheel(e)),this.canvas.addEventListener("touchstart",e=>this.onTouchStart(e)),this.canvas.addEventListener("touchmove",e=>this.onTouchMove(e)),this.canvas.addEventListener("touchend",e=>this.onTouchEnd(e)),this.canvas.addEventListener("touchcancel",e=>this.onTouchEnd(e)),this.canvas.addEventListener("contextmenu",e=>e.preventDefault()))}removeCanvasListeners(){this.canvas&&(this.canvas.removeEventListener("mousedown",this.onMouseDown),this.canvas.removeEventListener("mousemove",this.onMouseMove),this.canvas.removeEventListener("mouseup",this.onMouseUp),this.canvas.removeEventListener("mouseleave",this.onMouseLeave),this.canvas.removeEventListener("wheel",this.onWheel),this.canvas.removeEventListener("touchstart",this.onTouchStart),this.canvas.removeEventListener("touchmove",this.onTouchMove),this.canvas.removeEventListener("touchend",this.onTouchEnd),this.canvas.removeEventListener("touchcancel",this.onTouchEnd))}onMouseDown(e){e.preventDefault(),this.updateMousePosition(e),this.mouse.down=!0,this.mouse.pressed=!0,this.mouse.button=e.button,this.queueEvent("mousedown",{x:this.mouse.x,y:this.mouse.y,worldX:this.mouse.worldX,worldY:this.mouse.worldY,button:e.button})}onMouseMove(e){this.updateMousePosition(e),this.queueEvent("mousemove",{x:this.mouse.x,y:this.mouse.y,worldX:this.mouse.worldX,worldY:this.mouse.worldY})}onMouseUp(e){e.preventDefault(),this.updateMousePosition(e),this.mouse.down=!1,this.mouse.released=!0,this.mouse.button=-1,this.queueEvent("mouseup",{x:this.mouse.x,y:this.mouse.y,worldX:this.mouse.worldX,worldY:this.mouse.worldY,button:e.button})}onMouseLeave(e){this.mouse.down=!1,this.mouse.button=-1}onWheel(e){e.preventDefault(),this.queueEvent("wheel",{x:this.mouse.x,y:this.mouse.y,deltaY:e.deltaY,deltaX:e.deltaX})}onTouchStart(e){e.preventDefault();const t=e.touches[0];t&&(this.updateTouchPosition(t),this.touch.active=!0,this.touch.startX=this.touch.x,this.touch.startY=this.touch.y,this.touch.deltaX=0,this.touch.deltaY=0,this.queueEvent("touchstart",{x:this.touch.x,y:this.touch.y,worldX:this.touch.worldX,worldY:this.touch.worldY}))}onTouchMove(e){e.preventDefault();const t=e.touches[0];if(!t||!this.touch.active)return;const s=this.touch.x,n=this.touch.y;this.updateTouchPosition(t),this.touch.deltaX=this.touch.x-this.touch.startX,this.touch.deltaY=this.touch.y-this.touch.startY,this.queueEvent("touchmove",{x:this.touch.x,y:this.touch.y,worldX:this.touch.worldX,worldY:this.touch.worldY,deltaX:this.touch.deltaX,deltaY:this.touch.deltaY,moveX:this.touch.x-s,moveY:this.touch.y-n})}onTouchEnd(e){e.preventDefault(),this.touch.active&&this.queueEvent("touchend",{x:this.touch.x,y:this.touch.y,worldX:this.touch.worldX,worldY:this.touch.worldY,deltaX:this.touch.deltaX,deltaY:this.touch.deltaY}),this.touch.active=!1,this.touch.deltaX=0,this.touch.deltaY=0}onKeyDown(e){const t=e.key.toLowerCase();this.keyboard.keys.has(t)||this.keyboard.pressed.add(t),this.keyboard.keys.add(t),this.queueEvent("keydown",{key:t,code:e.code,ctrlKey:e.ctrlKey,shiftKey:e.shiftKey,altKey:e.altKey})}onKeyUp(e){const t=e.key.toLowerCase();this.keyboard.keys.delete(t),this.keyboard.released.add(t),this.queueEvent("keyup",{key:t,code:e.code,ctrlKey:e.ctrlKey,shiftKey:e.shiftKey,altKey:e.altKey})}onWindowBlur(){this.keyboard.keys.clear(),this.mouse.down=!1,this.touch.active=!1}onWindowFocus(){this.keyboard.pressed.clear(),this.keyboard.released.clear()}updateMousePosition(e){const t=this.canvas.getBoundingClientRect();this.mouse.x=e.clientX-t.left,this.mouse.y=e.clientY-t.top,this.updateWorldCoordinates()}updateTouchPosition(e){const t=this.canvas.getBoundingClientRect();this.touch.x=e.clientX-t.left,this.touch.y=e.clientY-t.top,this.touch.worldX=this.touch.x,this.touch.worldY=this.touch.y,this.camera&&(this.touch.worldX=this.camera.screenToWorldX(this.touch.x),this.touch.worldY=this.camera.screenToWorldY(this.touch.y))}updateWorldCoordinates(){this.mouse.worldX=this.mouse.x,this.mouse.worldY=this.mouse.y,this.camera&&(this.mouse.worldX=this.camera.screenToWorldX(this.mouse.x),this.mouse.worldY=this.camera.screenToWorldY(this.mouse.y))}queueEvent(e,t){this.eventQueue.push({type:e,data:t,timestamp:Utils.performance.now()})}update(){this.mouse.pressed=!1,this.mouse.released=!1,this.keyboard.pressed.clear(),this.keyboard.released.clear()}processEvents(){const e=[...this.eventQueue];this.eventQueue.length=0;for(const t of e)this.dispatchEvent(t.type,t.data)}addEventListener(e,t){this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push(t)}removeEventListener(e,t){if(this.listeners.has(e)){const s=this.listeners.get(e),n=s.indexOf(t);n>-1&&s.splice(n,1)}}dispatchEvent(e,t){if(this.listeners.has(e)){const s=this.listeners.get(e);for(const n of s)try{n(t)}catch(i){console.error(`Error in input event handler for ${e}:`,i)}}}isKeyDown(e){return this.keyboard.keys.has(e.toLowerCase())}isKeyPressed(e){return this.keyboard.pressed.has(e.toLowerCase())}isKeyReleased(e){return this.keyboard.released.has(e.toLowerCase())}isMouseDown(e=0){return this.mouse.down&&(e===-1||this.mouse.button===e)}isMousePressed(){return this.mouse.pressed}isMouseReleased(){return this.mouse.released}isTouchActive(){return this.touch.active}getMousePosition(){return{x:this.mouse.x,y:this.mouse.y}}getMouseWorldPosition(){return{x:this.mouse.worldX,y:this.mouse.worldY}}getTouchPosition(){return{x:this.touch.x,y:this.touch.y}}getTouchWorldPosition(){return{x:this.touch.worldX,y:this.touch.worldY}}destroy(){this.removeCanvasListeners(),document.removeEventListener("keydown",this.onKeyDown),document.removeEventListener("keyup",this.onKeyUp),window.removeEventListener("blur",this.onWindowBlur),window.removeEventListener("focus",this.onWindowFocus),this.listeners.clear(),this.eventQueue.length=0}}const M=new g;typeof module<"u"&&module.exports?module.exports=g:(window.InputManager=g,window.inputManager=M);class y{constructor(e){this.canvas=e,this.ctx=e.getContext("2d"),this.systemManager=null,this.screenManager=null,this.defenseManager=null,this.uiManager=null,this.gameState={running:!1,paused:!1,gameSpeed:1,level:1,wave:1,lives:10,score:0},this.resources={dharma:100,bandwidth:50,anonymity:75},this.enemies=[],this.projectiles=[],this.effects=[],this.lastUpdate=0,this.deltaTime=0,this.canvasResizeEnabled=!1,this.resizeRetryCount=0,this.eventHandlers=new Map,this.performanceConfig={targetFPS:60,maxFPS:120,minFPS:30,frameTimeTarget:1e3/60,adaptiveFrameRate:!0,performanceMode:"auto"},this.frameStats={lastFrameTime:0,frameCount:0,fpsHistory:[],averageFPS:60,frameTimeAccumulator:0,lastFPSUpdate:0},this.performanceThresholds={lowFPS:45,criticalFPS:30,highFPS:55},this.debugConfig={enabled:!1,logLevel:"warn",renderLogging:!1,performanceLogging:!1,maxLogFrequency:5e3,logHistory:new Map},this.backgroundCache={canvas:null,ctx:null,cached:!1,needsUpdate:!1,lastCanvasSize:{width:0,height:0}},this.initializeDebugMode(),this.initializeBackgroundCache(),this.setupEventListeners()}initializeDebugMode(){const t=new URLSearchParams(window.location.search).get("debug");(t==="true"||t==="1")&&(this.debugConfig.enabled=!0,this.debugConfig.logLevel="debug",this.debugConfig.renderLogging=!0,this.debugConfig.performanceLogging=!0),window.location.hostname!=="localhost"&&!window.location.hostname.includes("127.0.0.1")&&(this.debugConfig.enabled=!1,this.debugConfig.renderLogging=!1,this.debugConfig.performanceLogging=!1)}logDebug(e,t=null,s="general"){if(!this.debugConfig.enabled)return;const n=Date.now(),i=this.debugConfig.logHistory.get(s)||0;if(s==="performance"&&n-i<this.debugConfig.maxLogFrequency)return;this.debugConfig.logHistory.set(s,n);const a={debug:0,info:1,warn:2,error:3},r=a[this.debugConfig.logLevel]||1;if((a[s]||0)>=r){const l=`[Game:${s.toUpperCase()}]`;t?console.log(l,e,t):console.log(l,e)}}initializeBackgroundCache(){this.backgroundCache.canvas=document.createElement("canvas"),this.backgroundCache.ctx=this.backgroundCache.canvas.getContext("2d"),this.backgroundCache.cached=!1,this.backgroundCache.needsUpdate=!0}updateBackgroundCache(){if(!this.backgroundCache.needsUpdate)return;const e=this.backgroundCache.canvas,t=this.backgroundCache.ctx;(e.width!==this.canvas.width||e.height!==this.canvas.height)&&(e.width=this.canvas.width,e.height=this.canvas.height,this.backgroundCache.lastCanvasSize={width:this.canvas.width,height:this.canvas.height}),t.clearRect(0,0,e.width,e.height),this.renderBackgroundToCache(t),this.backgroundCache.cached=!0,this.backgroundCache.needsUpdate=!1,this.logDebug("Background cache updated",{width:e.width,height:e.height},"performance")}renderBackgroundToCache(e){const t=e.createLinearGradient(0,0,0,this.canvas.height);t.addColorStop(0,"#0f1419"),t.addColorStop(.3,"#1a1a2e"),t.addColorStop(.7,"#16213e"),t.addColorStop(1,"#0e1b2e"),e.fillStyle=t,e.fillRect(0,0,this.canvas.width,this.canvas.height),e.globalAlpha=.1,e.fillStyle="#ffffff";const s=2,n=30;for(let i=0;i<this.canvas.width;i+=n)for(let a=0;a<this.canvas.height;a+=n)e.beginPath(),e.arc(i,a,s,0,Math.PI*2),e.fill();e.globalAlpha=1}invalidateBackgroundCache(){this.backgroundCache.needsUpdate=!0,this.backgroundCache.cached=!1}async initialize(){console.log("[Game] Initializing game systems...");try{const{default:e}=await w(async()=>{const{default:s}=await import("./GameSystemManager-ce65dYd2.js");return{default:s}},[]);this.systemManager=new e;const t=await this.systemManager.initialize();if(!t.success)throw new Error(`System initialization failed: ${t.error}`);return this.screenManager||(this.screenManager=new S),this.defenseManager=new p,this.uiManager=new u,this.setupInput(),this.setupManagerCallbacks(),this.setupGameSystems(),console.log("[Game] Game initialization complete"),!0}catch(e){return console.error("[Game] Initialization failed:",e),this.handleInitializationError(e),!1}}setupInput(){var e,t,s,n,i,a,r,o;this.inputManager=new g,(t=(e=this.inputManager).setCanvas)==null||t.call(e,this.canvas),(n=(s=this.inputManager).setCamera)==null||n.call(s,window.camera),(a=(i=this.inputManager).addEventListener)==null||a.call(i,"mousedown",l=>this.handleMouseDown(l)),(o=(r=this.inputManager).addEventListener)==null||o.call(r,"mousemove",l=>this.handleMouseMove(l))}setupManagerCallbacks(){console.log("[Game] Setting up screen manager callbacks"),this.screenManager.on("startNewGame",()=>{console.log("[Game] startNewGame callback triggered"),this.startNewGame()}),this.screenManager.on("continueGame",()=>{console.log("[Game] continueGame callback triggered"),this.continueGame()}),this.screenManager.on("pauseGame",()=>this.pauseGame()),this.screenManager.on("resumeGame",()=>this.resumeGame()),this.screenManager.on("returnToMenu",()=>this.returnToMenu()),this.defenseManager.on("checkResources",t=>this.checkResources(t.cost)),this.defenseManager.on("deductResources",t=>this.deductResources(t.cost)),this.defenseManager.on("refundResources",t=>this.refundResources(t.refund)),this.defenseManager.on("defensePlace",t=>this.onDefensePlace(t)),this.defenseManager.on("defenseFireProjectile",t=>this.onDefenseFireProjectile(t));const e=this.systemManager.getLevelManager();e&&e.setCallbacks({onWaveStart:t=>this.onWaveStart(t),onWaveComplete:t=>this.onWaveComplete(t),onLevelComplete:t=>this.onLevelComplete(t),onEnemySpawn:t=>this.onEnemySpawn(t),onEnemyKilled:t=>this.onEnemyKilled(t),onEnemySpawnRequest:(t,s,n)=>this.spawnEnemy(t,s,n)})}setupGameSystems(){this.canvas.width=800,this.canvas.height=600,this.initializeSpriteSystem(),window.camera&&(window.camera.setCanvas(this.canvas),window.camera.setBounds(0,0,800,600),console.log("[Game] Camera bounds set to fallback: 800x600"));const e=this.systemManager.getLevelManager();e&&e.initializeLevel(this.gameState.level),this.updateUI()}initializeSpriteSystem(){if(!window.spriteManager){console.warn("[Game] SpriteManager not available");return}console.log("[Game] Initializing sprite system..."),window.spriteManager.loadGameSprites().then(()=>{console.log("[Game] Game sprites loaded (some may be fallbacks)")}).catch(t=>{console.warn("[Game] Error loading game sprites, using all fallbacks:",t)}),["enemy_scriptKiddie","enemy_federalAgent","enemy_corporateSaboteur","enemy_aiSurveillance","enemy_quantumHacker","enemy_corruptedMonk","defense_firewall_level1","defense_encryption_level1","defense_decoy_level1","defense_quantum_level1","defense_dharma_level1","defense_cybermonk_level1","boss_raidTeam_phase1","boss_megaCorp_phase1","boss_corruptedMonk_phase1"].forEach(t=>{window.spriteManager.hasSprite(t)||window.spriteManager.createFallbackSprite(t)}),console.log("[Game] Sprite system initialized with enhanced graphics")}resizeCanvas(){if(!this.canvasResizeEnabled){console.log("[Game] Canvas resize disabled, skipping");return}const e=document.getElementById("game-screen");if(!e||!e.classList.contains("active")){console.log("[Game] Game screen not active, skipping canvas resize");return}const t=this.canvas.parentElement;if(t){const s=t.getBoundingClientRect();if(s.width===0||s.height===0){console.log("[Game] Container has no size yet, using fallback dimensions"),this.canvas.width=800,this.canvas.height=600,this.canvas.style.width="100%",this.canvas.style.height="100%";return}this.canvas.style.width=s.width+"px",this.canvas.style.height=s.height+"px",this.canvas.width=s.width,this.canvas.height=s.height,console.log(`[Game] Canvas resized to ${this.canvas.width}x${this.canvas.height} (${s.width}x${s.height} CSS)`)}else this.canvas.width=800,this.canvas.height=600,this.canvas.style.width="100%",this.canvas.style.height="100%",console.log("[Game] Using fallback canvas dimensions: 800x600")}setupEventListeners(){document.addEventListener("gameSpeedChange",e=>{this.gameState.gameSpeed=e.detail.speed}),document.addEventListener("togglePause",()=>{this.togglePause()}),document.addEventListener("startNextWave",()=>{this.startNextWave()}),document.addEventListener("selectDefenseType",e=>{this.defenseManager.selectDefenseType(e.detail.type)})}startNewGame(){console.log("[Game] Starting new game..."),this.gameState={running:!0,paused:!1,gameSpeed:1,level:1,wave:1,lives:10,score:0},this.resources={dharma:100,bandwidth:50,anonymity:75},this.enemies.length=0,this.projectiles.length=0,this.effects.length=0,this.defenseManager.clear(),window.particleSystem&&window.particleSystem.clear(),window.projectilePool&&window.projectilePool.clear();const e=this.systemManager.getLevelManager();e&&e.initializeLevel(this.gameState.level),this.canvasResizeEnabled=!0,this.resizeRetryCount=0,setTimeout(()=>{this.resizeCanvas(),window.camera&&(window.camera.setBounds(0,0,this.canvas.width,this.canvas.height),console.log(`[Game] Camera bounds updated to: ${this.canvas.width}x${this.canvas.height}`))},100),this.updateUI(),this.startGameLoop()}continueGame(){console.log("[Game] Continuing game...");const e=this.systemManager.getSaveSystem();if(e){const t=e.quickLoad();if(t)this.loadGameState(t);else{console.warn("[Game] No save data found, starting new game"),this.startNewGame();return}}this.gameState.running=!0,this.gameState.paused=!1,this.canvasResizeEnabled=!0,this.resizeRetryCount=0,setTimeout(()=>{this.resizeCanvas(),window.camera&&(window.camera.setBounds(0,0,this.canvas.width,this.canvas.height),console.log(`[Game] Camera bounds updated to: ${this.canvas.width}x${this.canvas.height}`))},100),this.startGameLoop()}pauseGame(){this.gameState.paused=!0,console.log("[Game] Game paused")}resumeGame(){this.gameState.paused=!1,this.lastUpdate=h.performance.now(),console.log("[Game] Game resumed")}togglePause(){this.gameState.paused?this.resumeGame():this.pauseGame()}returnToMenu(){this.gameState.running=!1,this.canvasResizeEnabled=!1,console.log("[Game] Returned to menu")}async startGameLoop(){this.frameStats.lastFrameTime=h.performance.now(),this.frameStats.lastFPSUpdate=this.frameStats.lastFrameTime,this.gameLoop()}gameLoop(e=h.performance.now()){if(!this.gameState.running)return;const t=e-this.frameStats.lastFrameTime;if(t<this.performanceConfig.frameTimeTarget){requestAnimationFrame(n=>this.gameLoop(n));return}this.updateFrameStats(e,t),this.adaptPerformanceSettings();const s=Math.min(t*this.gameState.gameSpeed,33.33);this.gameState.paused||this.update(s),this.shouldRender()&&this.render(),this.frameStats.lastFrameTime=e,requestAnimationFrame(n=>this.gameLoop(n))}updateFrameStats(e,t){if(this.frameStats.frameCount++,this.frameStats.frameTimeAccumulator+=t,e-this.frameStats.lastFPSUpdate>=1e3){const s=this.frameStats.frameCount;this.frameStats.fpsHistory.push(s),this.frameStats.fpsHistory.length>10&&this.frameStats.fpsHistory.shift(),this.frameStats.averageFPS=this.frameStats.fpsHistory.reduce((n,i)=>n+i,0)/this.frameStats.fpsHistory.length,this.frameStats.frameCount=0,this.frameStats.frameTimeAccumulator=0,this.frameStats.lastFPSUpdate=e}}adaptPerformanceSettings(){if(!this.performanceConfig.adaptiveFrameRate)return;const e=this.frameStats.averageFPS;e<this.performanceThresholds.criticalFPS?this.setPerformanceMode("performance"):e<this.performanceThresholds.lowFPS?this.setPerformanceMode("balanced"):e>this.performanceThresholds.highFPS&&this.setPerformanceMode("quality")}setPerformanceMode(e){switch(e){case"performance":this.performanceConfig.targetFPS=30,this.performanceConfig.frameTimeTarget=1e3/30,window.particleSystem&&window.particleSystem.setMaxParticles(200);break;case"balanced":this.performanceConfig.targetFPS=45,this.performanceConfig.frameTimeTarget=1e3/45,window.particleSystem&&window.particleSystem.setMaxParticles(350);break;case"quality":this.performanceConfig.targetFPS=60,this.performanceConfig.frameTimeTarget=1e3/60,window.particleSystem&&window.particleSystem.setMaxParticles(500);break}this.performanceConfig.performanceMode=e,this.logDebug(`Performance mode set to: ${e} (Target FPS: ${this.performanceConfig.targetFPS})`,null,"performance")}shouldRender(){return this.performanceConfig.performanceMode==="performance"?this.frameStats.frameCount%2===0:!0}getPerformanceStats(){return{currentFPS:this.frameStats.averageFPS,targetFPS:this.performanceConfig.targetFPS,performanceMode:this.performanceConfig.performanceMode,frameTimeAverage:this.frameStats.frameTimeAccumulator/Math.max(1,this.frameStats.frameCount),fpsHistory:[...this.frameStats.fpsHistory]}}update(e){this.inputManager&&(this.inputManager.processEvents(),this.inputManager.update()),window.camera&&window.camera.update(e),this.updateEnemies(e),this.defenseManager.update(e,this.enemies),this.updateProjectiles(e),window.particleSystem&&window.particleSystem.update(e);const t=this.systemManager.getLevelManager();if(t)try{t.update(e)}catch(s){console.error("[Game] Error updating LevelManager:",s)}this.checkGameOver(),this.updateUI()}updateEnemies(e){for(let t=this.enemies.length-1;t>=0;t--){const s=this.enemies[t];s.update&&s.update(e),s.isAlive||(this.onEnemyDestroyed(s),this.enemies.splice(t,1)),s.reachedEnd&&(this.onEnemyEscaped(s),this.enemies.splice(t,1))}}updateProjectiles(e){window.projectilePool&&window.projectilePool.updateAll(e)}render(){this.ctx.save(),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.logDebug("Render frame",{canvasSize:{width:this.canvas.width,height:this.canvas.height},enemies:this.enemies.length,gameRunning:this.gameState.running,paused:this.gameState.paused},"performance");let e=null;window.camera&&(e=window.camera.applyTransform(this.ctx)),this.renderBackground(),this.renderPath(),this.renderEnemies(),this.defenseManager.render(this.ctx),this.renderProjectiles(),this.renderParticles(),e&&e(),this.renderUI(),this.ctx.restore()}renderBackground(){(this.backgroundCache.lastCanvasSize.width!==this.canvas.width||this.backgroundCache.lastCanvasSize.height!==this.canvas.height)&&this.invalidateBackgroundCache(),this.updateBackgroundCache(),this.backgroundCache.cached?this.ctx.drawImage(this.backgroundCache.canvas,0,0):this.renderBackgroundToCache(this.ctx),this.logDebug("Background rendered",{cached:this.backgroundCache.cached,canvasSize:{width:this.canvas.width,height:this.canvas.height}},"performance")}renderPath(){const e=this.systemManager.getLevelManager();if(!e){this.logDebug("No level manager available for path rendering",null,"warn");return}const t=e.getCurrentPath();if(!t||t.length<2){this.logDebug("Invalid path for rendering",{pathLength:t==null?void 0:t.length},"warn");return}this.logDebug("Path rendered",{pathLength:t.length,firstPoint:t[0],lastPoint:t[t.length-1]},"performance"),this.ctx.save(),this.ctx.globalAlpha=.3,this.ctx.strokeStyle="#00d4ff",this.ctx.lineWidth=20,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.shadowBlur=15,this.ctx.shadowColor="#00d4ff",this.ctx.beginPath(),this.ctx.moveTo(t[0].x,t[0].y);for(let s=1;s<t.length;s++)this.ctx.lineTo(t[s].x,t[s].y);this.ctx.stroke(),this.ctx.globalAlpha=.8,this.ctx.strokeStyle="#0088cc",this.ctx.lineWidth=14,this.ctx.shadowBlur=8,this.ctx.shadowColor="#0088cc",this.ctx.beginPath(),this.ctx.moveTo(t[0].x,t[0].y);for(let s=1;s<t.length;s++)this.ctx.lineTo(t[s].x,t[s].y);this.ctx.stroke(),this.ctx.globalAlpha=1,this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=4,this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.moveTo(t[0].x,t[0].y);for(let s=1;s<t.length;s++)this.ctx.lineTo(t[s].x,t[s].y);if(this.ctx.stroke(),this.performanceConfig.performanceMode!=="performance"){this.ctx.globalAlpha=.9;const s=Date.now()*.003;for(let n=0;n<t.length-1;n++){const i=n/(t.length-1),a=(s+i*2)%1,r=t[n].x,o=t[n].y,l=t[n+1].x,d=t[n+1].y,m=r+(l-r)*a,f=o+(d-o)*a;this.ctx.fillStyle="#ffd60a",this.ctx.shadowBlur=5,this.ctx.shadowColor="#ffd60a",this.ctx.beginPath(),this.ctx.arc(m,f,3,0,Math.PI*2),this.ctx.fill()}}this.ctx.shadowBlur=10,this.ctx.fillStyle="#00ff88",this.ctx.shadowColor="#00ff88",this.ctx.beginPath(),this.ctx.arc(t[0].x,t[0].y,12,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=.6,this.ctx.fillStyle="#ffffff",this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.arc(t[0].x,t[0].y,6,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=1,this.ctx.fillStyle="#ff4444",this.ctx.shadowBlur=10,this.ctx.shadowColor="#ff4444",this.ctx.beginPath(),this.ctx.arc(t[t.length-1].x,t[t.length-1].y,12,0,Math.PI*2),this.ctx.fill(),this.ctx.globalAlpha=.6,this.ctx.fillStyle="#ffffff",this.ctx.shadowBlur=0,this.ctx.beginPath(),this.ctx.arc(t[t.length-1].x,t[t.length-1].y,6,0,Math.PI*2),this.ctx.fill(),this.ctx.restore()}renderEnemies(){this.logDebug("Enemies rendered",{count:this.enemies.length},"performance");for(let e=0;e<this.enemies.length;e++){const t=this.enemies[e];t&&t.render?t.render(this.ctx):this.logDebug(`Enemy ${e} is invalid or missing render method`,{enemy:t},"warn")}}renderProjectiles(){window.projectilePool&&window.projectilePool.renderAll(this.ctx)}renderParticles(){window.particleSystem&&window.particleSystem.render(this.ctx)}renderUI(){}handleMouseDown(e){if(this.defenseManager.placementMode)this.defenseManager.placeDefense(e.worldX,e.worldY)||window.audioManager&&window.audioManager.playSound("ui_error");else{const t=this.findDefenseAt(e.worldX,e.worldY);t?this.defenseManager.selectDefense(t):this.defenseManager.deselectDefense()}}handleMouseMove(e){}findDefenseAt(e,t){for(const s of this.defenseManager.defenses)if(h.math.distance(e,t,s.x,s.y)<=s.size)return s;return null}startNextWave(){const e=this.systemManager.getLevelManager();e&&e.canStartNextWave()&&e.startWave()}checkGameOver(){this.gameState.lives<=0&&this.gameOver(!1)}gameOver(e){this.gameState.running=!1,console.log(`[Game] Game Over - ${e?"Victory":"Defeat"}`);const t=new CustomEvent("gameOver",{detail:{victory:e,score:this.gameState.score}});document.dispatchEvent(t),this.trackGameOverAchievements(e)}checkResources(e){return this.resources.dharma>=e.dharma&&this.resources.bandwidth>=e.bandwidth&&this.resources.anonymity>=e.anonymity}deductResources(e){return this.checkResources(e)?(this.resources.dharma-=e.dharma,this.resources.bandwidth-=e.bandwidth,this.resources.anonymity-=e.anonymity,this.updateUI(),!0):!1}refundResources(e){this.resources.dharma+=e.dharma||0,this.resources.bandwidth+=e.bandwidth||0,this.resources.anonymity+=e.anonymity||0,this.updateUI()}addResources(e){this.resources.dharma+=e.dharma||0,this.resources.bandwidth+=e.bandwidth||0,this.resources.anonymity+=e.anonymity||0,this.updateUI()}onWaveStart(e){console.log(`[Game] Wave ${e.wave} started`),this.gameState.wave=e.wave,this.updateUI(),e.waveData&&e.waveData.enemies&&console.log(`[Game] Starting enemy spawning for wave ${e.wave}`),window.audioManager&&window.audioManager.playSound("wave_start")}onWaveComplete(e){console.log(`[Game] Wave ${e.wave} completed`);const t=this.calculateWaveReward(e);this.addResources(t),this.uiManager.showNotification(`Wave ${e.wave} Complete! +${t.dharma} Dharma`,"success"),window.audioManager&&window.audioManager.playSound("wave_complete")}onLevelComplete(e){console.log(`[Game] Level ${e.level} completed`),this.gameState.level=e.level+1;const t=this.calculateLevelReward(e);this.addResources(t),this.uiManager.showNotification(`Level ${e.level} Complete!`,"success",5e3),window.audioManager&&window.audioManager.playSound("level_complete")}spawnEnemy(e,t,s){try{if(typeof v>"u")return console.error("[Game] Enemy class not available for spawning"),!1;if(!e||!t||!s)return console.error("[Game] Invalid spawn parameters:",{enemyData:e,spawnPoint:t,path:s}),!1;const n=new v(e.type,t.x,t.y);n.setPath&&typeof n.setPath=="function"&&n.setPath(s),e.health!==void 0&&(n.health=e.health,n.maxHealth=e.health),e.speed!==void 0&&(n.speed=e.speed,n.baseSpeed=e.speed),e.reward!==void 0&&(n.reward=e.reward),this.enemies.push(n),console.log(`[Game] Spawned ${e.type} enemy at ${t.x}, ${t.y}`),console.log("[Game] Enemy details:",{type:n.type,x:n.x,y:n.y,size:n.size,color:n.color,hasRenderMethod:typeof n.render=="function",isAlive:n.isAlive}),console.log("[Game] Total enemies now:",this.enemies.length);const i=this.systemManager.getLevelManager();return i&&typeof i.onEnemySpawned=="function"&&i.onEnemySpawned(),!0}catch(n){return console.error("[Game] Error spawning enemy:",n),!1}}handleCanvasResize(e){try{console.log("[Game] Handling canvas resize:",e),window.camera&&(window.camera.setBounds(0,0,e.width,e.height),console.log(`[Game] Updated camera bounds to: ${e.width}x${e.height}`)),this.uiManager&&typeof this.uiManager.handleCanvasResize=="function"&&this.uiManager.handleCanvasResize(e),this.defenseManager&&typeof this.defenseManager.handleCanvasResize=="function"&&this.defenseManager.handleCanvasResize(e);const t=this.systemManager.getLevelManager();t&&typeof t.handleCanvasResize=="function"&&t.handleCanvasResize(e),console.log("[Game] Canvas resize handling complete")}catch(t){console.error("[Game] Error handling canvas resize:",t)}}onEnemySpawn(e){this.enemies.push(e);const t=this.systemManager.getLevelManager();t&&t.onEnemySpawned()}onEnemyKilled(e){const t=this.calculateKillReward(e.enemy);this.addResources(t),this.gameState.score+=t.dharma*10,window.particleSystem&&window.particleSystem.emit("death",e.enemy.x,e.enemy.y);const s=this.systemManager.getLevelManager();s&&s.onEnemyKilled(),this.trackKillAchievements(e.enemy)}onEnemyDestroyed(e){this.onEnemyKilled({enemy:e})}onEnemyEscaped(e){this.gameState.lives--,this.gameState.lives>0&&(this.uiManager.showNotification("Enemy escaped! Life lost.","warning"),this.uiManager.flashScreen("#ff0000",300));const t=this.systemManager.getLevelManager();t&&t.onEnemyEscaped(),window.audioManager&&window.audioManager.playSound("life_lost")}onDefensePlace(e){console.log(`[Game] Placed ${e.defense.type} defense`),window.audioManager&&window.audioManager.playSound("defense_place"),window.particleSystem&&window.particleSystem.emit("upgrade",e.defense.x,e.defense.y)}onDefenseFireProjectile(e){window.audioManager&&window.audioManager.playSound("defense_fire")}calculateKillReward(e){const t=e.reward||10;return{dharma:t,bandwidth:Math.floor(t*.1),anonymity:Math.floor(t*.05)}}calculateWaveReward(e){const t=50+e.wave*10;return{dharma:t,bandwidth:Math.floor(t*.2),anonymity:Math.floor(t*.1)}}calculateLevelReward(e){const t=200+e.level*50;return{dharma:t,bandwidth:Math.floor(t*.3),anonymity:Math.floor(t*.2)}}trackKillAchievements(e){const t=this.systemManager.getAchievementManager();t&&t.trackEvent("enemy_killed",{type:e.type})}trackGameOverAchievements(e){const t=this.systemManager.getAchievementManager();t&&t.trackEvent("game_over",{victory:e,score:this.gameState.score,level:this.gameState.level})}updateUI(){this.uiManager.updateResources(this.resources),this.uiManager.updateGameState(this.gameState);const e=this.systemManager.getLevelManager();if(e){const t=e.canStartNextWave(),s=e.getNextWavePreview();if(this.uiManager.updateWaveButton(t,s),e.isWaveInProgress()){const n=e.getWaveProgress();this.uiManager.updateWaveProgress(n*100,100)}}}loadGameState(e){var t;this.gameState.level=e.level||1,this.gameState.wave=e.wave||1,this.gameState.score=((t=e.statistics)==null?void 0:t.totalScore)||0,this.gameState.lives=10,this.resources=e.resources||this.resources}saveGame(){const e=this.systemManager.getSaveSystem();if(e){const t={level:this.gameState.level,wave:this.gameState.wave,resources:this.resources,statistics:{totalScore:this.gameState.score,totalPlayTime:Date.now()}};return e.quickSave(t)}return!1}handleInitializationError(e){console.error("[Game] Critical initialization error:",e);const t=document.createElement("div");t.innerHTML=`
            <div class="error-screen">
                <h2>Game Initialization Failed</h2>
                <p>Error: ${e.message}</p>
                <button onclick="location.reload()">Reload Game</button>
            </div>
        `,document.body.appendChild(t)}destroy(){this.gameState.running=!1,this.defenseManager&&this.defenseManager.destroy(),this.screenManager&&this.screenManager.destroy(),this.uiManager&&this.uiManager.destroy(),this.systemManager&&this.systemManager.shutdown(),console.log("[Game] Game destroyed")}}typeof module<"u"&&module.exports?module.exports=y:window.Game=y;export{y as default};
